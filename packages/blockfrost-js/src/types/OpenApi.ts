/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  "/": {
    /** Root endpoint has no other function than to point end users to documentation. */
    get: {
      responses: {
        /** Information pointing to the documentation. */
        200: {
          content: {
            "application/json": {
              /** @example https://blockfrost.io/ */
              url: string;
              /** @example 0.1.0 */
              version: string;
            };
          };
        };
        400: components["responses"]["400"];
        403: components["responses"]["403"];
        418: components["responses"]["418"];
        429: components["responses"]["429"];
        500: components["responses"]["500"];
      };
    };
  };
  "/health": {
    /** Return backend status as a boolean. Your application should handle situations when backend for the given chain is unavailable. */
    get: {
      responses: {
        /** Return the boolean indicating the health of the backend. */
        200: {
          content: {
            "application/json": {
              /** @example true */
              is_healthy: boolean;
            };
          };
        };
        400: components["responses"]["400"];
        403: components["responses"]["403"];
        418: components["responses"]["418"];
        429: components["responses"]["429"];
        500: components["responses"]["500"];
      };
    };
  };
  "/health/clock": {
    /**
     * This endpoint provides the current UNIX time. Your application might
     * use this to verify if the client clock is not out of sync.
     */
    get: {
      responses: {
        /** Return the current UNIX time in milliseconds. */
        200: {
          content: {
            "application/json": {
              /**
               * Format: int64
               * @example 1603400958947
               */
              server_time: number;
            };
          };
        };
        400: components["responses"]["400"];
        403: components["responses"]["403"];
        418: components["responses"]["418"];
        429: components["responses"]["429"];
        500: components["responses"]["500"];
      };
    };
  };
  "/blocks/latest": {
    /**
     * Return the latest block available to the backends, also known as the
     * tip of the blockchain.
     */
    get: {
      responses: {
        /** Return the contents of the block */
        200: {
          content: {
            "application/json": components["schemas"]["block_content"];
          };
        };
        400: components["responses"]["400"];
        403: components["responses"]["403"];
        404: components["responses"]["404"];
        418: components["responses"]["418"];
        429: components["responses"]["429"];
        500: components["responses"]["500"];
      };
    };
  };
  "/blocks/latest/txs": {
    /** Return the transactions within the latest block. */
    get: {
      parameters: {
        query: {
          /** The number of results displayed on one page. */
          count?: number;
          /** The page number for listing the results. */
          page?: number;
          /**
           * Ordered by tx index in the block.
           * The ordering of items from the point of view of the blockchain,
           * not the page listing itself. By default, we return oldest first, newest last.
           */
          order?: "asc" | "desc";
        };
      };
      responses: {
        /** Return the contents of the block */
        200: {
          content: {
            "application/json": components["schemas"]["block_content_txs"];
          };
        };
        400: components["responses"]["400"];
        403: components["responses"]["403"];
        404: components["responses"]["404"];
        418: components["responses"]["418"];
        429: components["responses"]["429"];
        500: components["responses"]["500"];
      };
    };
  };
  "/blocks/{hash_or_number}": {
    /** Return the content of a requested block. */
    get: {
      parameters: {
        path: {
          /** Hash or number of the requested block. */
          hash_or_number: string;
        };
      };
      responses: {
        /** Return the contents of the block */
        200: {
          content: {
            "application/json": components["schemas"]["block_content"];
          };
        };
        400: components["responses"]["400"];
        403: components["responses"]["403"];
        404: components["responses"]["404"];
        418: components["responses"]["418"];
        429: components["responses"]["429"];
        500: components["responses"]["500"];
      };
    };
  };
  "/blocks/{hash_or_number}/next": {
    /** Return the list of blocks following a specific block. */
    get: {
      parameters: {
        path: {
          /** Hash of the requested block. */
          hash_or_number: string;
        };
        query: {
          /** The number of results displayed on one page. */
          count?: number;
          /** The page number for listing the results. */
          page?: number;
        };
      };
      responses: {
        /** Return the contents of the block */
        200: {
          content: {
            "application/json": components["schemas"]["block_content_array"];
          };
        };
        400: components["responses"]["400"];
        403: components["responses"]["403"];
        404: components["responses"]["404"];
        418: components["responses"]["418"];
        429: components["responses"]["429"];
        500: components["responses"]["500"];
      };
    };
  };
  "/blocks/{hash_or_number}/previous": {
    /** Return the list of blocks preceding a specific block. */
    get: {
      parameters: {
        path: {
          /** Hash of the requested block */
          hash_or_number: string;
        };
        query: {
          /** The number of results displayed on one page. */
          count?: number;
          /** The page number for listing the results. */
          page?: number;
        };
      };
      responses: {
        /** Return the contents of the block */
        200: {
          content: {
            "application/json": components["schemas"]["block_content_array"];
          };
        };
        400: components["responses"]["400"];
        403: components["responses"]["403"];
        404: components["responses"]["404"];
        418: components["responses"]["418"];
        429: components["responses"]["429"];
        500: components["responses"]["500"];
      };
    };
  };
  "/blocks/slot/{slot_number}": {
    /** Return the content of a requested block for a specific slot. */
    get: {
      parameters: {
        path: {
          /** Slot position for requested block. */
          slot_number: number;
        };
      };
      responses: {
        /** Return the contents of the block */
        200: {
          content: {
            "application/json": components["schemas"]["block_content"];
          };
        };
        400: components["responses"]["400"];
        403: components["responses"]["403"];
        404: components["responses"]["404"];
        418: components["responses"]["418"];
        429: components["responses"]["429"];
        500: components["responses"]["500"];
      };
    };
  };
  "/blocks/epoch/{epoch_number}/slot/{slot_number}": {
    /** Return the content of a requested block for a specific slot in an epoch. */
    get: {
      parameters: {
        path: {
          /** Epoch for specific epoch slot. */
          epoch_number: number;
          /** Slot position for requested block. */
          slot_number: number;
        };
      };
      responses: {
        /** Return the contents of the block */
        200: {
          content: {
            "application/json": components["schemas"]["block_content"];
          };
        };
        400: components["responses"]["400"];
        403: components["responses"]["403"];
        404: components["responses"]["404"];
        418: components["responses"]["418"];
        429: components["responses"]["429"];
        500: components["responses"]["500"];
      };
    };
  };
  "/blocks/{hash_or_number}/txs": {
    /** Return the transactions within the block. */
    get: {
      parameters: {
        path: {
          /** Hash of the requested block. */
          hash_or_number: string;
        };
        query: {
          /** The number of results displayed on one page. */
          count?: number;
          /** The page number for listing the results. */
          page?: number;
          /**
           * Ordered by tx index in the block.
           * The ordering of items from the point of view of the blockchain,
           * not the page listing itself. By default, we return oldest first, newest last.
           */
          order?: "asc" | "desc";
        };
      };
      responses: {
        /** Return the contents of the block */
        200: {
          content: {
            "application/json": components["schemas"]["block_content_txs"];
          };
        };
        400: components["responses"]["400"];
        403: components["responses"]["403"];
        404: components["responses"]["404"];
        418: components["responses"]["418"];
        429: components["responses"]["429"];
        500: components["responses"]["500"];
      };
    };
  };
  "/blocks/{hash_or_number}/addresses": {
    /** Return list of addresses affected in the specified block with additional information, sorted by the bech32 address, ascending. */
    get: {
      parameters: {
        path: {
          /** Hash of the requested block. */
          hash_or_number: string;
        };
        query: {
          /** The number of results displayed on one page. */
          count?: number;
          /** The page number for listing the results. */
          page?: number;
        };
      };
      responses: {
        /** Return the contents of the block */
        200: {
          content: {
            "application/json": components["schemas"]["block_content_addresses"];
          };
        };
        400: components["responses"]["400"];
        403: components["responses"]["403"];
        404: components["responses"]["404"];
        418: components["responses"]["418"];
        429: components["responses"]["429"];
        500: components["responses"]["500"];
      };
    };
  };
  "/genesis": {
    /** Return the information about blockchain genesis. */
    get: {
      responses: {
        /** Return the genesis parameters. */
        200: {
          content: {
            "application/json": components["schemas"]["genesis_content"];
          };
        };
        400: components["responses"]["400"];
        403: components["responses"]["403"];
        418: components["responses"]["418"];
        429: components["responses"]["429"];
        500: components["responses"]["500"];
      };
    };
  };
  "/epochs/latest": {
    /** Return the information about the latest, therefore current, epoch. */
    get: {
      responses: {
        /** Return the data about the epoch */
        200: {
          content: {
            "application/json": components["schemas"]["epoch_content"];
          };
        };
        400: components["responses"]["400"];
        403: components["responses"]["403"];
        404: components["responses"]["404"];
        418: components["responses"]["418"];
        429: components["responses"]["429"];
        500: components["responses"]["500"];
      };
    };
  };
  "/epochs/latest/parameters": {
    /** Return the protocol parameters for the latest epoch. */
    get: {
      responses: {
        /** Return the data about the epoch */
        200: {
          content: {
            "application/json": components["schemas"]["epoch_param_content"];
          };
        };
        400: components["responses"]["400"];
        403: components["responses"]["403"];
        404: components["responses"]["404"];
        418: components["responses"]["418"];
        429: components["responses"]["429"];
        500: components["responses"]["500"];
      };
    };
  };
  "/epochs/{number}": {
    /** Return the content of the requested epoch. */
    get: {
      parameters: {
        path: {
          /** Number of the epoch */
          number: number;
        };
      };
      responses: {
        /** Return the epoch data. */
        200: {
          content: {
            "application/json": components["schemas"]["epoch_content"];
          };
        };
        400: components["responses"]["400"];
        403: components["responses"]["403"];
        404: components["responses"]["404"];
        418: components["responses"]["418"];
        429: components["responses"]["429"];
        500: components["responses"]["500"];
      };
    };
  };
  "/epochs/{number}/next": {
    /** Return the list of epochs following a specific epoch. */
    get: {
      parameters: {
        path: {
          /** Number of the requested epoch. */
          number: number;
        };
        query: {
          /** The number of results displayed on one page. */
          count?: number;
          /** The page number for listing the results. */
          page?: number;
        };
      };
      responses: {
        /** Return the data about the epoch */
        200: {
          content: {
            "application/json": components["schemas"]["epoch_content_array"];
          };
        };
        400: components["responses"]["400"];
        403: components["responses"]["403"];
        404: components["responses"]["404"];
        418: components["responses"]["418"];
        429: components["responses"]["429"];
        500: components["responses"]["500"];
      };
    };
  };
  "/epochs/{number}/previous": {
    /** Return the list of epochs preceding a specific epoch. */
    get: {
      parameters: {
        path: {
          /** Number of the epoch */
          number: number;
        };
        query: {
          /** The number of results displayed on one page. */
          count?: number;
          /** The page number for listing the results */
          page?: number;
        };
      };
      responses: {
        /** Return the epoch data */
        200: {
          content: {
            "application/json": components["schemas"]["epoch_content_array"];
          };
        };
        400: components["responses"]["400"];
        403: components["responses"]["403"];
        404: components["responses"]["404"];
        418: components["responses"]["418"];
        429: components["responses"]["429"];
        500: components["responses"]["500"];
      };
    };
  };
  "/epochs/{number}/stakes": {
    /** Return the active stake distribution for the specified epoch. */
    get: {
      parameters: {
        path: {
          /** Number of the epoch */
          number: number;
        };
        query: {
          /** The number of results displayed on one page. */
          count?: number;
          /** The page number for listing the results. */
          page?: number;
        };
      };
      responses: {
        /** Return the data about the epoch */
        200: {
          content: {
            "application/json": components["schemas"]["epoch_stake_content"];
          };
        };
        400: components["responses"]["400"];
        403: components["responses"]["403"];
        404: components["responses"]["404"];
        418: components["responses"]["418"];
        429: components["responses"]["429"];
        500: components["responses"]["500"];
      };
    };
  };
  "/epochs/{number}/stakes/{pool_id}": {
    /** Return the active stake distribution for the epoch specified by stake pool. */
    get: {
      parameters: {
        path: {
          /** Number of the epoch */
          number: number;
          /** Stake pool ID to filter */
          pool_id: string;
        };
        query: {
          /** The number of results displayed on one page. */
          count?: number;
          /** The page number for listing the results. */
          page?: number;
        };
      };
      responses: {
        /** Return the data about the epoch */
        200: {
          content: {
            "application/json": components["schemas"]["epoch_stake_pool_content"];
          };
        };
        400: components["responses"]["400"];
        403: components["responses"]["403"];
        404: components["responses"]["404"];
        418: components["responses"]["418"];
        429: components["responses"]["429"];
        500: components["responses"]["500"];
      };
    };
  };
  "/epochs/{number}/blocks": {
    /** Return the blocks minted for the epoch specified. */
    get: {
      parameters: {
        path: {
          /** Number of the epoch */
          number: number;
        };
        query: {
          /** The number of results displayed on one page. */
          count?: number;
          /** The page number for listing the results. */
          page?: number;
          /**
           * The ordering of items from the point of view of the blockchain,
           * not the page listing itself. By default, we return oldest first, newest last.
           */
          order?: "asc" | "desc";
        };
      };
      responses: {
        /** Return the data about the epoch */
        200: {
          content: {
            "application/json": components["schemas"]["epoch_block_content"];
          };
        };
        400: components["responses"]["400"];
        403: components["responses"]["403"];
        404: components["responses"]["404"];
        418: components["responses"]["418"];
        429: components["responses"]["429"];
        500: components["responses"]["500"];
      };
    };
  };
  "/epochs/{number}/blocks/{pool_id}": {
    /** Return the block minted for the epoch specified by stake pool. */
    get: {
      parameters: {
        path: {
          /** Number of the epoch */
          number: number;
          /** Stake pool ID to filter */
          pool_id: string;
        };
        query: {
          /** The number of results displayed on one page. */
          count?: number;
          /** The page number for listing the results. */
          page?: number;
          /**
           * The ordering of items from the point of view of the blockchain,
           * not the page listing itself. By default, we return oldest first, newest last.
           */
          order?: "asc" | "desc";
        };
      };
      responses: {
        /** Return the data about the epoch */
        200: {
          content: {
            "application/json": components["schemas"]["epoch_block_content"];
          };
        };
        400: components["responses"]["400"];
        403: components["responses"]["403"];
        404: components["responses"]["404"];
        418: components["responses"]["418"];
        429: components["responses"]["429"];
        500: components["responses"]["500"];
      };
    };
  };
  "/epochs/{number}/parameters": {
    /** Return the protocol parameters for the epoch specified. */
    get: {
      parameters: {
        path: {
          /** Number of the epoch */
          number: number;
        };
      };
      responses: {
        /** Return the data about the epoch */
        200: {
          content: {
            "application/json": components["schemas"]["epoch_param_content"];
          };
        };
        400: components["responses"]["400"];
        403: components["responses"]["403"];
        404: components["responses"]["404"];
        418: components["responses"]["418"];
        429: components["responses"]["429"];
        500: components["responses"]["500"];
      };
    };
  };
  "/txs/{hash}": {
    /** Return content of the requested transaction. */
    get: {
      parameters: {
        path: {
          /** Hash of the requested transaction */
          hash: string;
        };
      };
      responses: {
        /** Return the contents of the transaction. */
        200: {
          content: {
            "application/json": components["schemas"]["tx_content"];
          };
        };
        400: components["responses"]["400"];
        403: components["responses"]["403"];
        404: components["responses"]["404"];
        418: components["responses"]["418"];
        429: components["responses"]["429"];
        500: components["responses"]["500"];
      };
    };
  };
  "/txs/{hash}/utxos": {
    /** Return the inputs and UTXOs of the specific transaction. */
    get: {
      parameters: {
        path: {
          /** Hash of the requested transaction */
          hash: string;
        };
      };
      responses: {
        /** Return the contents of the transaction. */
        200: {
          content: {
            "application/json": components["schemas"]["tx_content_utxo"];
          };
        };
        400: components["responses"]["400"];
        403: components["responses"]["403"];
        404: components["responses"]["404"];
        418: components["responses"]["418"];
        429: components["responses"]["429"];
        500: components["responses"]["500"];
      };
    };
  };
  "/txs/{hash}/stakes": {
    /** Obtain information about (de)registration of stake addresses within a transaction. */
    get: {
      parameters: {
        path: {
          /** Hash of the requested transaction. */
          hash: string;
        };
      };
      responses: {
        /** Obtain information about (de)registration of stake addresses within a transaction. */
        200: {
          content: {
            "application/json": components["schemas"]["tx_content_stake_addr"];
          };
        };
        400: components["responses"]["400"];
        403: components["responses"]["403"];
        404: components["responses"]["404"];
        418: components["responses"]["418"];
        429: components["responses"]["429"];
        500: components["responses"]["500"];
      };
    };
  };
  "/txs/{hash}/delegations": {
    /** Obtain information about delegation certificates of a specific transaction. */
    get: {
      parameters: {
        path: {
          /** Hash of the requested transaction. */
          hash: string;
        };
      };
      responses: {
        /** Obtain information about delegation certificates of a specific transaction */
        200: {
          content: {
            "application/json": components["schemas"]["tx_content_delegations"];
          };
        };
        400: components["responses"]["400"];
        403: components["responses"]["403"];
        404: components["responses"]["404"];
        418: components["responses"]["418"];
        429: components["responses"]["429"];
        500: components["responses"]["500"];
      };
    };
  };
  "/txs/{hash}/withdrawals": {
    /** Obtain information about withdrawals of a specific transaction. */
    get: {
      parameters: {
        path: {
          /** Hash of the requested transaction. */
          hash: string;
        };
      };
      responses: {
        /** Obtain information about withdrawals of a specific transaction. */
        200: {
          content: {
            "application/json": components["schemas"]["tx_content_withdrawals"];
          };
        };
        400: components["responses"]["400"];
        403: components["responses"]["403"];
        404: components["responses"]["404"];
        418: components["responses"]["418"];
        429: components["responses"]["429"];
        500: components["responses"]["500"];
      };
    };
  };
  "/txs/{hash}/mirs": {
    /** Obtain information about Move Instantaneous Rewards (MIRs) of a specific transaction. */
    get: {
      parameters: {
        path: {
          /** Hash of the requested transaction. */
          hash: string;
        };
      };
      responses: {
        /** Obtain information about Move Instantaneous Rewards (MIRs) of a specific transaction. */
        200: {
          content: {
            "application/json": components["schemas"]["tx_content_mirs"];
          };
        };
        400: components["responses"]["400"];
        403: components["responses"]["403"];
        404: components["responses"]["404"];
        418: components["responses"]["418"];
        429: components["responses"]["429"];
        500: components["responses"]["500"];
      };
    };
  };
  "/txs/{hash}/pool_updates": {
    /** Obtain information about stake pool registration and update certificates of a specific transaction. */
    get: {
      parameters: {
        path: {
          /** Hash of the requested transaction */
          hash: string;
        };
      };
      responses: {
        /** Obtain information about stake pool certificates of a specific transaction */
        200: {
          content: {
            "application/json": components["schemas"]["tx_content_pool_certs"];
          };
        };
        400: components["responses"]["400"];
        403: components["responses"]["403"];
        404: components["responses"]["404"];
        418: components["responses"]["418"];
        429: components["responses"]["429"];
        500: components["responses"]["500"];
      };
    };
  };
  "/txs/{hash}/pool_retires": {
    /** Obtain information about stake pool retirements within a specific transaction. */
    get: {
      parameters: {
        path: {
          /** Hash of the requested transaction */
          hash: string;
        };
      };
      responses: {
        /** Obtain information about stake pool retirements within a specific transaction. */
        200: {
          content: {
            "application/json": components["schemas"]["tx_content_pool_retires"];
          };
        };
        400: components["responses"]["400"];
        403: components["responses"]["403"];
        404: components["responses"]["404"];
        418: components["responses"]["418"];
        429: components["responses"]["429"];
        500: components["responses"]["500"];
      };
    };
  };
  "/txs/{hash}/metadata": {
    /** Obtain the transaction metadata. */
    get: {
      parameters: {
        path: {
          /** Hash of the requested transaction */
          hash: string;
        };
      };
      responses: {
        /** Obtain information about stake pool retirements within a specific transaction. */
        200: {
          content: {
            "application/json": components["schemas"]["tx_content_metadata"];
          };
        };
        400: components["responses"]["400"];
        403: components["responses"]["403"];
        404: components["responses"]["404"];
        418: components["responses"]["418"];
        429: components["responses"]["429"];
        500: components["responses"]["500"];
      };
    };
  };
  "/txs/{hash}/metadata/cbor": {
    /** Obtain the transaction metadata in CBOR. */
    get: {
      parameters: {
        path: {
          /** Hash of the requested transaction */
          hash: string;
        };
      };
      responses: {
        /** Obtain information about stake pool retirements within a specific transaction. */
        200: {
          content: {
            "application/json": components["schemas"]["tx_content_metadata_cbor"];
          };
        };
        400: components["responses"]["400"];
        403: components["responses"]["403"];
        404: components["responses"]["404"];
        418: components["responses"]["418"];
        429: components["responses"]["429"];
        500: components["responses"]["500"];
      };
    };
  };
  "/txs/{hash}/redeemers": {
    /** Obtain the transaction redeemers. */
    get: {
      parameters: {
        path: {
          /** Hash of the requested transaction */
          hash: string;
        };
      };
      responses: {
        /** Obtain information about redeemers within a specific transaction. */
        200: {
          content: {
            "application/json": components["schemas"]["tx_content_redeemers"];
          };
        };
        400: components["responses"]["400"];
        403: components["responses"]["403"];
        404: components["responses"]["404"];
        418: components["responses"]["418"];
        429: components["responses"]["429"];
        500: components["responses"]["500"];
      };
    };
  };
  "/tx/submit": {
    /** Submit an already serialized transaction to the network. */
    post: {
      parameters: {
        header: {
          "Content-Type": "application/cbor";
        };
      };
      responses: {
        /** Return the ID of the submitted transaction. */
        200: {
          content: {
            "application/json": string;
          };
        };
        400: components["responses"]["400"];
        403: components["responses"]["403"];
        404: components["responses"]["404"];
        418: components["responses"]["418"];
        425: components["responses"]["425"];
        429: components["responses"]["429"];
        500: components["responses"]["500"];
      };
    };
  };
  "/accounts/{stake_address}": {
    /** Obtain information about a specific stake account. */
    get: {
      parameters: {
        path: {
          /** Bech32 stake address. */
          stake_address: string;
        };
      };
      responses: {
        /** Return the account content. */
        200: {
          content: {
            "application/json": components["schemas"]["account_content"];
          };
        };
        400: components["responses"]["400"];
        403: components["responses"]["403"];
        404: components["responses"]["404"];
        418: components["responses"]["418"];
        429: components["responses"]["429"];
        500: components["responses"]["500"];
      };
    };
  };
  "/accounts/{stake_address}/rewards": {
    /** Obtain information about the reward history of a specific account. */
    get: {
      parameters: {
        path: {
          /** Bech32 stake address. */
          stake_address: string;
        };
        query: {
          /** The number of results displayed on one page. */
          count?: number;
          /** The page number for listing the results. */
          page?: number;
          /**
           * The ordering of items from the point of view of the blockchain,
           * not the page listing itself. By default, we return oldest first, newest last.
           */
          order?: "asc" | "desc";
        };
      };
      responses: {
        /** Return the account content. */
        200: {
          content: {
            "application/json": components["schemas"]["account_reward_content"];
          };
        };
        400: components["responses"]["400"];
        403: components["responses"]["403"];
        404: components["responses"]["404"];
        418: components["responses"]["418"];
        429: components["responses"]["429"];
        500: components["responses"]["500"];
      };
    };
  };
  "/accounts/{stake_address}/history": {
    /** Obtain information about the history of a specific account. */
    get: {
      parameters: {
        path: {
          /** Bech32 stake address. */
          stake_address: string;
        };
        query: {
          /** The number of results displayed on one page. */
          count?: number;
          /** The page number for listing the results. */
          page?: number;
          /**
           * The ordering of items from the point of view of the blockchain,
           * not the page listing itself. By default, we return oldest first, newest last.
           */
          order?: "asc" | "desc";
        };
      };
      responses: {
        /** Return the account content. */
        200: {
          content: {
            "application/json": components["schemas"]["account_history_content"];
          };
        };
        400: components["responses"]["400"];
        403: components["responses"]["403"];
        404: components["responses"]["404"];
        418: components["responses"]["418"];
        429: components["responses"]["429"];
        500: components["responses"]["500"];
      };
    };
  };
  "/accounts/{stake_address}/delegations": {
    /** Obtain information about the delegation of a specific account. */
    get: {
      parameters: {
        path: {
          /** Bech32 stake address. */
          stake_address: string;
        };
        query: {
          /** The number of results displayed on one page. */
          count?: number;
          /** The page number for listing the results. */
          page?: number;
          /**
           * The ordering of items from the point of view of the blockchain,
           * not the page listing itself. By default, we return oldest first, newest last.
           */
          order?: "asc" | "desc";
        };
      };
      responses: {
        /** Return the account delegations content */
        200: {
          content: {
            "application/json": components["schemas"]["account_delegation_content"];
          };
        };
        400: components["responses"]["400"];
        403: components["responses"]["403"];
        404: components["responses"]["404"];
        418: components["responses"]["418"];
        429: components["responses"]["429"];
        500: components["responses"]["500"];
      };
    };
  };
  "/accounts/{stake_address}/registrations": {
    /** Obtain information about the registrations and deregistrations of a specific account. */
    get: {
      parameters: {
        path: {
          /** Bech32 stake address. */
          stake_address: string;
        };
        query: {
          /** The number of results displayed on one page. */
          count?: number;
          /** The page number for listing the results. */
          page?: number;
          /**
           * The ordering of items from the point of view of the blockchain,
           * not the page listing itself. By default, we return oldest first, newest last.
           */
          order?: "asc" | "desc";
        };
      };
      responses: {
        /** Return the account registration content. */
        200: {
          content: {
            "application/json": components["schemas"]["account_registration_content"];
          };
        };
        400: components["responses"]["400"];
        403: components["responses"]["403"];
        404: components["responses"]["404"];
        418: components["responses"]["418"];
        429: components["responses"]["429"];
        500: components["responses"]["500"];
      };
    };
  };
  "/accounts/{stake_address}/withdrawals": {
    /** Obtain information about the withdrawals of a specific account. */
    get: {
      parameters: {
        path: {
          /** Bech32 stake address. */
          stake_address: string;
        };
        query: {
          /** The number of results displayed on one page. */
          count?: number;
          /** The page number for listing the results. */
          page?: number;
          /**
           * The ordering of items from the point of view of the blockchain,
           * not the page listing itself. By default, we return oldest first, newest last.
           */
          order?: "asc" | "desc";
        };
      };
      responses: {
        /** Return the account withdrawal content. */
        200: {
          content: {
            "application/json": components["schemas"]["account_withdrawal_content"];
          };
        };
        400: components["responses"]["400"];
        403: components["responses"]["403"];
        404: components["responses"]["404"];
        418: components["responses"]["418"];
        429: components["responses"]["429"];
        500: components["responses"]["500"];
      };
    };
  };
  "/accounts/{stake_address}/mirs": {
    /** Obtain information about the MIRs of a specific account. */
    get: {
      parameters: {
        path: {
          /** Bech32 stake address. */
          stake_address: string;
        };
        query: {
          /** The number of results displayed on one page. */
          count?: number;
          /** The page number for listing the results. */
          page?: number;
          /**
           * The ordering of items from the point of view of the blockchain,
           * not the page listing itself. By default, we return oldest first, newest last.
           */
          order?: "asc" | "desc";
        };
      };
      responses: {
        /** Return the account MIR content. */
        200: {
          content: {
            "application/json": components["schemas"]["account_mir_content"];
          };
        };
        400: components["responses"]["400"];
        403: components["responses"]["403"];
        404: components["responses"]["404"];
        418: components["responses"]["418"];
        429: components["responses"]["429"];
        500: components["responses"]["500"];
      };
    };
  };
  "/accounts/{stake_address}/addresses": {
    /** Obtain information about the addresses of a specific account. */
    get: {
      parameters: {
        path: {
          /** Bech32 stake address. */
          stake_address: string;
        };
        query: {
          /** The number of results displayed on one page. */
          count?: number;
          /** The page number for listing the results. */
          page?: number;
          /**
           * The ordering of items from the point of view of the blockchain,
           * not the page listing itself. By default, we return oldest first, newest last.
           */
          order?: "asc" | "desc";
        };
      };
      responses: {
        /** Return the account addresses content */
        200: {
          content: {
            "application/json": components["schemas"]["account_addresses_content"];
          };
        };
        400: components["responses"]["400"];
        403: components["responses"]["403"];
        404: components["responses"]["404"];
        418: components["responses"]["418"];
        429: components["responses"]["429"];
        500: components["responses"]["500"];
      };
    };
  };
  "/accounts/{stake_address}/addresses/assets": {
    /**
     * Obtain information about assets associated with addresses of a specific account.
     * <b>Be careful</b>, as an account could be part of a mangled address and does not necessarily mean the addresses are owned by user as the account.
     */
    get: {
      parameters: {
        path: {
          /** Bech32 stake address. */
          stake_address: string;
        };
        query: {
          /** The number of results displayed on one page. */
          count?: number;
          /** The page number for listing the results. */
          page?: number;
          /**
           * The ordering of items from the point of view of the blockchain,
           * not the page listing itself. By default, we return oldest first, newest last.
           */
          order?: "asc" | "desc";
        };
      };
      responses: {
        /** Return the account addresses content */
        200: {
          content: {
            "application/json": components["schemas"]["account_addresses_assets"];
          };
        };
        400: components["responses"]["400"];
        403: components["responses"]["403"];
        404: components["responses"]["404"];
        418: components["responses"]["418"];
        429: components["responses"]["429"];
        500: components["responses"]["500"];
      };
    };
  };
  "/accounts/{stake_address}/addresses/total": {
    /**
     * Obtain summed details about all addresses associated with a given account.
     * <b>Be careful</b>, as an account could be part of a mangled address and does not necessarily mean the addresses are owned by user as the account.
     */
    get: {
      parameters: {
        path: {
          /** Bech32 address. */
          stake_address: string;
        };
      };
      responses: {
        /** Return the Address details. */
        200: {
          content: {
            "application/json": components["schemas"]["account_addresses_total"];
          };
        };
        400: components["responses"]["400"];
        403: components["responses"]["403"];
        404: components["responses"]["404"];
        418: components["responses"]["418"];
        429: components["responses"]["429"];
        500: components["responses"]["500"];
      };
    };
  };
  "/metadata/txs/labels": {
    /** List of all used transaction metadata labels. */
    get: {
      parameters: {
        query: {
          /** The number of results displayed on one page. */
          count?: number;
          /** The page number for listing the results. */
          page?: number;
          /**
           * The ordering of items from the point of view of the blockchain,
           * not the page listing itself. By default, we return oldest first, newest last.
           */
          order?: "asc" | "desc";
        };
      };
      responses: {
        /** Return the account delegations content */
        200: {
          content: {
            "application/json": components["schemas"]["tx_metadata_labels"];
          };
        };
        400: components["responses"]["400"];
        403: components["responses"]["403"];
        404: components["responses"]["404"];
        418: components["responses"]["418"];
        429: components["responses"]["429"];
        500: components["responses"]["500"];
      };
    };
  };
  "/metadata/txs/labels/{label}": {
    /** Transaction metadata per label. */
    get: {
      parameters: {
        path: {
          /** Metadata label */
          label: string;
        };
        query: {
          /** The number of results displayed on one page. */
          count?: number;
          /** The page number for listing the results. */
          page?: number;
          /**
           * The ordering of items from the point of view of the blockchain,
           * not the page listing itself. By default, we return oldest first, newest last.
           */
          order?: "asc" | "desc";
        };
      };
      responses: {
        /** Return the account delegations content */
        200: {
          content: {
            "application/json": components["schemas"]["tx_metadata_label_json"];
          };
        };
        400: components["responses"]["400"];
        403: components["responses"]["403"];
        404: components["responses"]["404"];
        418: components["responses"]["418"];
        429: components["responses"]["429"];
        500: components["responses"]["500"];
      };
    };
  };
  "/metadata/txs/labels/{label}/cbor": {
    /** Transaction metadata per label. */
    get: {
      parameters: {
        path: {
          /** Metadata label */
          label: string;
        };
        query: {
          /** The number of results displayed on one page. */
          count?: number;
          /** The page number for listing the results. */
          page?: number;
          /**
           * The ordering of items from the point of view of the blockchain,
           * not the page listing itself. By default, we return oldest first, newest last.
           */
          order?: "asc" | "desc";
        };
      };
      responses: {
        /** Return the account delegations content in CBOR */
        200: {
          content: {
            "application/json": components["schemas"]["tx_metadata_label_cbor"];
          };
        };
        400: components["responses"]["400"];
        403: components["responses"]["403"];
        404: components["responses"]["404"];
        418: components["responses"]["418"];
        429: components["responses"]["429"];
        500: components["responses"]["500"];
      };
    };
  };
  "/addresses/{address}": {
    /** Obtain information about a specific address. */
    get: {
      parameters: {
        path: {
          /** Bech32 address. */
          address: string;
        };
      };
      responses: {
        /** Return the address content. */
        200: {
          content: {
            "application/json": components["schemas"]["address_content"];
          };
        };
        400: components["responses"]["400"];
        403: components["responses"]["403"];
        404: components["responses"]["404"];
        418: components["responses"]["418"];
        429: components["responses"]["429"];
        500: components["responses"]["500"];
      };
    };
  };
  "/addresses/{address}/extended": {
    /** Obtain extended information about a specific address. */
    get: {
      parameters: {
        path: {
          /** Bech32 address. */
          address: string;
        };
      };
      responses: {
        /** Return the address content. */
        200: {
          content: {
            "application/json": components["schemas"]["address_content_extended"];
          };
        };
        400: components["responses"]["400"];
        403: components["responses"]["403"];
        404: components["responses"]["404"];
        418: components["responses"]["418"];
        429: components["responses"]["429"];
        500: components["responses"]["500"];
      };
    };
  };
  "/addresses/{address}/total": {
    /** Obtain details about an address. */
    get: {
      parameters: {
        path: {
          /** Bech32 address. */
          address: string;
        };
      };
      responses: {
        /** Return the Address details. */
        200: {
          content: {
            "application/json": components["schemas"]["address_content_total"];
          };
        };
        400: components["responses"]["400"];
        403: components["responses"]["403"];
        404: components["responses"]["404"];
        418: components["responses"]["418"];
        429: components["responses"]["429"];
        500: components["responses"]["500"];
      };
    };
  };
  "/addresses/{address}/utxos": {
    /** UTXOs of the address. */
    get: {
      parameters: {
        path: {
          /** Bech32 address. */
          address: string;
        };
        query: {
          /** The number of results displayed on one page. */
          count?: number;
          /** The page number for listing the results. */
          page?: number;
          /**
           * The ordering of items from the point of view of the blockchain,
           * not the page listing itself. By default, we return oldest first, newest last.
           */
          order?: "asc" | "desc";
        };
      };
      responses: {
        /** Return the address content */
        200: {
          content: {
            "application/json": components["schemas"]["address_utxo_content"];
          };
        };
        400: components["responses"]["400"];
        403: components["responses"]["403"];
        404: components["responses"]["404"];
        418: components["responses"]["418"];
        429: components["responses"]["429"];
        500: components["responses"]["500"];
      };
    };
  };
  "/addresses/{address}/utxos/{asset}": {
    /** UTXOs of the address. */
    get: {
      parameters: {
        path: {
          /** Bech32 address. */
          address: string;
          /** Concatenation of the policy_id and hex-encoded asset_name */
          asset: string;
        };
        query: {
          /** The number of results displayed on one page. */
          count?: number;
          /** The page number for listing the results. */
          page?: number;
          /**
           * The ordering of items from the point of view of the blockchain,
           * not the page listing itself. By default, we return oldest first, newest last.
           */
          order?: "asc" | "desc";
        };
      };
      responses: {
        /** Return the address content */
        200: {
          content: {
            "application/json": components["schemas"]["address_utxo_content"];
          };
        };
        400: components["responses"]["400"];
        403: components["responses"]["403"];
        404: components["responses"]["404"];
        418: components["responses"]["418"];
        429: components["responses"]["429"];
        500: components["responses"]["500"];
      };
    };
  };
  "/addresses/{address}/txs": {
    /** Transactions on the address. */
    get: {
      parameters: {
        path: {
          /** Bech32 address. */
          address: string;
        };
        query: {
          /** The number of transactions per page. */
          count?: number;
          /** The page number for listing the results. */
          page?: number;
          /**
           * The ordering of items from the point of view of the blockchain,
           * not the page listing itself. By default, we return oldest first, newest last.
           */
          order?: "asc" | "desc";
        };
      };
      responses: {
        /** Return the address content */
        200: {
          content: {
            "application/json": components["schemas"]["address_txs_content"];
          };
        };
        400: components["responses"]["400"];
        403: components["responses"]["403"];
        404: components["responses"]["404"];
        418: components["responses"]["418"];
        429: components["responses"]["429"];
        500: components["responses"]["500"];
      };
    };
  };
  "/addresses/{address}/transactions": {
    /** Transactions on the address. */
    get: {
      parameters: {
        path: {
          /** Bech32 address. */
          address: string;
        };
        query: {
          /** The number of addresses per page. */
          count?: number;
          /** The page number for listing the results. */
          page?: number;
          /**
           * The ordering of items from the point of view of the blockchain,
           * not the page listing itself. By default, we return oldest first, newest last.
           */
          order?: "asc" | "desc";
          /**
           * The block number and optionally also index from which (inclusive) to start search for results, concatenated using colon.
           * Has to be lower than or equal to `to` parameter.
           */
          from?: string;
          /**
           * The block number and optionally also index where (inclusive) to end the search for results, concatenated using colon.
           * Has to be higher than or equal to `from` parameter.
           */
          to?: string;
        };
      };
      responses: {
        /** Return the address content */
        200: {
          content: {
            "application/json": components["schemas"]["address_transactions_content"];
          };
        };
        400: components["responses"]["400"];
        403: components["responses"]["403"];
        404: components["responses"]["404"];
        418: components["responses"]["418"];
        429: components["responses"]["429"];
        500: components["responses"]["500"];
      };
    };
  };
  "/pools": {
    /** List of registered stake pools. */
    get: {
      parameters: {
        query: {
          /** The number of pools per page. */
          count?: number;
          /** The page number for listing the results. */
          page?: number;
          /**
           * The ordering of items from the point of view of the blockchain,
           * not the page listing itself. By default, we return oldest first, newest last.
           */
          order?: "asc" | "desc";
        };
      };
      responses: {
        /** Return the list of pools. */
        200: {
          content: {
            "application/json": components["schemas"]["pool_list"];
          };
        };
        400: components["responses"]["400"];
        403: components["responses"]["403"];
        404: components["responses"]["404"];
        418: components["responses"]["418"];
        429: components["responses"]["429"];
        500: components["responses"]["500"];
      };
    };
  };
  "/pools/extended": {
    /** List of registered stake pools with additional information. */
    get: {
      parameters: {
        query: {
          /** The number of pools per page. */
          count?: number;
          /** The page number for listing the results. */
          page?: number;
          /**
           * The ordering of items from the point of view of the blockchain,
           * not the page listing itself. By default, we return oldest first, newest last.
           */
          order?: "asc" | "desc";
        };
      };
      responses: {
        /** Return the list of pools. */
        200: {
          content: {
            "application/json": components["schemas"]["pool_list_extended"];
          };
        };
        400: components["responses"]["400"];
        403: components["responses"]["403"];
        404: components["responses"]["404"];
        418: components["responses"]["418"];
        429: components["responses"]["429"];
        500: components["responses"]["500"];
      };
    };
  };
  "/pools/retired": {
    /** List of already retired pools. */
    get: {
      parameters: {
        query: {
          /** The number of pools per page. */
          count?: number;
          /** The page number for listing the results. */
          page?: number;
          /**
           * The ordering of items from the point of view of the blockchain,
           * not the page listing itself. By default, we return oldest first, newest last.
           */
          order?: "asc" | "desc";
        };
      };
      responses: {
        /** Return the pool information content */
        200: {
          content: {
            "application/json": components["schemas"]["pool_list_retire"];
          };
        };
        400: components["responses"]["400"];
        403: components["responses"]["403"];
        404: components["responses"]["404"];
        418: components["responses"]["418"];
        429: components["responses"]["429"];
        500: components["responses"]["500"];
      };
    };
  };
  "/pools/retiring": {
    /** List of stake pools retiring in the upcoming epochs */
    get: {
      parameters: {
        query: {
          /** The number of results displayed on one page. */
          count?: number;
          /** The page number for listing the results. */
          page?: number;
          /**
           * The ordering of items from the point of view of the blockchain,
           * not the page listing itself. By default, we return oldest first, newest last.
           */
          order?: "asc" | "desc";
        };
      };
      responses: {
        /** Return the pool information content */
        200: {
          content: {
            "application/json": components["schemas"]["pool_list_retire"];
          };
        };
        400: components["responses"]["400"];
        403: components["responses"]["403"];
        404: components["responses"]["404"];
        418: components["responses"]["418"];
        429: components["responses"]["429"];
        500: components["responses"]["500"];
      };
    };
  };
  "/pools/{pool_id}": {
    /** Pool information. */
    get: {
      parameters: {
        path: {
          /** Bech32 or hexadecimal pool ID. */
          pool_id: string;
        };
      };
      responses: {
        /** Return the pool information content */
        200: {
          content: {
            "application/json": components["schemas"]["pool"];
          };
        };
        400: components["responses"]["400"];
        403: components["responses"]["403"];
        404: components["responses"]["404"];
        418: components["responses"]["418"];
        429: components["responses"]["429"];
        500: components["responses"]["500"];
      };
    };
  };
  "/pools/{pool_id}/history": {
    /** History of stake pool parameters over epochs. */
    get: {
      parameters: {
        path: {
          /** Bech32 or hexadecimal pool ID. */
          pool_id: string;
        };
        query: {
          /** The number of results displayed on one page. */
          count?: number;
          /** The page number for listing the results */
          page?: number;
          /**
           * The ordering of items from the point of view of the blockchain,
           * not the page listing itself. By default, we return oldest first, newest last.
           */
          order?: "asc" | "desc";
        };
      };
      responses: {
        /** Return the pool information content. */
        200: {
          content: {
            "application/json": components["schemas"]["pool_history"];
          };
        };
        400: components["responses"]["400"];
        403: components["responses"]["403"];
        404: components["responses"]["404"];
        418: components["responses"]["418"];
        429: components["responses"]["429"];
        500: components["responses"]["500"];
      };
    };
  };
  "/pools/{pool_id}/metadata": {
    /** Stake pool registration metadata. */
    get: {
      parameters: {
        path: {
          /** Bech32 or hexadecimal pool ID. */
          pool_id: string;
        };
      };
      responses: {
        /** Return the pool metadata content. */
        200: {
          content: {
            "application/json": Partial<
              components["schemas"]["pool_metadata"]
            > &
              Partial<components["schemas"]["empty_object"]>;
          };
        };
        400: components["responses"]["400"];
        403: components["responses"]["403"];
        404: components["responses"]["404"];
        418: components["responses"]["418"];
        429: components["responses"]["429"];
        500: components["responses"]["500"];
      };
    };
  };
  "/pools/{pool_id}/relays": {
    /** Relays of a stake pool. */
    get: {
      parameters: {
        path: {
          /** Bech32 or hexadecimal pool ID. */
          pool_id: string;
        };
      };
      responses: {
        /** Return the pool relays information content. */
        200: {
          content: {
            "application/json": components["schemas"]["pool_relays"];
          };
        };
        400: components["responses"]["400"];
        403: components["responses"]["403"];
        404: components["responses"]["404"];
        418: components["responses"]["418"];
        429: components["responses"]["429"];
        500: components["responses"]["500"];
      };
    };
  };
  "/pools/{pool_id}/delegators": {
    /** List of current stake pools delegators. */
    get: {
      parameters: {
        path: {
          /** Bech32 or hexadecimal pool ID. */
          pool_id: string;
        };
        query: {
          /** The number of results displayed on one page. */
          count?: number;
          /** The page number for listing the results. */
          page?: number;
          /**
           * The ordering of items from the point of view of the blockchain,
           * not the page listing itself. By default, we return oldest first, newest last.
           */
          order?: "asc" | "desc";
        };
      };
      responses: {
        /** Return the pool delegations. */
        200: {
          content: {
            "application/json": components["schemas"]["pool_delegators"];
          };
        };
        400: components["responses"]["400"];
        403: components["responses"]["403"];
        404: components["responses"]["404"];
        418: components["responses"]["418"];
        429: components["responses"]["429"];
        500: components["responses"]["500"];
      };
    };
  };
  "/pools/{pool_id}/blocks": {
    /** List of stake pools blocks. */
    get: {
      parameters: {
        path: {
          /** Bech32 or hexadecimal pool ID. */
          pool_id: string;
        };
        query: {
          /** The number of results displayed on one page. */
          count?: number;
          /** The page number for listing the results. */
          page?: number;
          /**
           * The ordering of items from the point of view of the blockchain,
           * not the page listing itself. By default, we return oldest first, newest last.
           */
          order?: "asc" | "desc";
        };
      };
      responses: {
        /** Return the pool block list */
        200: {
          content: {
            "application/json": components["schemas"]["pool_blocks"];
          };
        };
        400: components["responses"]["400"];
        403: components["responses"]["403"];
        404: components["responses"]["404"];
        418: components["responses"]["418"];
        429: components["responses"]["429"];
        500: components["responses"]["500"];
      };
    };
  };
  "/pools/{pool_id}/updates": {
    /** List of certificate updates to the stake pool. */
    get: {
      parameters: {
        path: {
          /** Bech32 or hexadecimal pool ID. */
          pool_id: string;
        };
        query: {
          /** The number of results displayed on one page. */
          count?: number;
          /** The page number for listing the results. */
          page?: number;
          /**
           * The ordering of items from the point of view of the blockchain,
           * not the page listing itself. By default, we return oldest first, newest last.
           */
          order?: "asc" | "desc";
        };
      };
      responses: {
        /** Return the pool updates history */
        200: {
          content: {
            "application/json": components["schemas"]["pool_updates"];
          };
        };
        400: components["responses"]["400"];
        403: components["responses"]["403"];
        404: components["responses"]["404"];
        418: components["responses"]["418"];
        429: components["responses"]["429"];
        500: components["responses"]["500"];
      };
    };
  };
  "/assets": {
    /** List of assets. */
    get: {
      parameters: {
        query: {
          /** The number of results displayed on one page. */
          count?: number;
          /** The page number for listing the results. */
          page?: number;
          /**
           * The ordering of items from the point of view of the blockchain,
           * not the page listing itself. By default, we return oldest first, newest last.
           */
          order?: "asc" | "desc";
        };
      };
      responses: {
        /** Return list of assets */
        200: {
          content: {
            "application/json": components["schemas"]["assets"];
          };
        };
        400: components["responses"]["400"];
        403: components["responses"]["403"];
        404: components["responses"]["404"];
        418: components["responses"]["418"];
        429: components["responses"]["429"];
        500: components["responses"]["500"];
      };
    };
  };
  "/assets/{asset}": {
    /** Information about a specific asset */
    get: {
      parameters: {
        path: {
          /** Concatenation of the policy_id and hex-encoded asset_name */
          asset: string;
        };
      };
      responses: {
        /** Return the information about a specific asset */
        200: {
          content: {
            "application/json": components["schemas"]["asset"];
          };
        };
        400: components["responses"]["400"];
        403: components["responses"]["403"];
        404: components["responses"]["404"];
        418: components["responses"]["418"];
        429: components["responses"]["429"];
        500: components["responses"]["500"];
      };
    };
  };
  "/assets/{asset}/history": {
    /** History of a specific asset */
    get: {
      parameters: {
        path: {
          /** Concatenation of the policy_id and hex-encoded asset_name */
          asset: string;
        };
        query: {
          /** The number of results displayed on one page. */
          count?: number;
          /** The page number for listing the results. */
          page?: number;
          /**
           * The ordering of items from the point of view of the blockchain,
           * not the page listing itself. By default, we return oldest first, newest last.
           */
          order?: "asc" | "desc";
        };
      };
      responses: {
        /** Return the information about the history of a specific asset */
        200: {
          content: {
            "application/json": components["schemas"]["asset_history"];
          };
        };
        400: components["responses"]["400"];
        403: components["responses"]["403"];
        404: components["responses"]["404"];
        418: components["responses"]["418"];
        429: components["responses"]["429"];
        500: components["responses"]["500"];
      };
    };
  };
  "/assets/{asset}/txs": {
    /** List of a specific asset transactions */
    get: {
      parameters: {
        path: {
          /** Concatenation of the policy_id and hex-encoded asset_name */
          asset: string;
        };
        query: {
          /** The number of results displayed on one page. */
          count?: number;
          /** The page number for listing the results. */
          page?: number;
          /**
           * The ordering of items from the point of view of the blockchain,
           * not the page listing itself. By default, we return oldest first, newest last.
           */
          order?: "asc" | "desc";
        };
      };
      responses: {
        /** Return the information about the history of a specific asset */
        200: {
          content: {
            "application/json": components["schemas"]["asset_txs"];
          };
        };
        400: components["responses"]["400"];
        403: components["responses"]["403"];
        404: components["responses"]["404"];
        418: components["responses"]["418"];
        429: components["responses"]["429"];
        500: components["responses"]["500"];
      };
    };
  };
  "/assets/{asset}/transactions": {
    /** List of a specific asset transactions */
    get: {
      parameters: {
        path: {
          /** Concatenation of the policy_id and hex-encoded asset_name */
          asset: string;
        };
        query: {
          /** The number of results displayed on one page. */
          count?: number;
          /** The page number for listing the results. */
          page?: number;
          /**
           * The ordering of items from the point of view of the blockchain,
           * not the page listing itself. By default, we return oldest first, newest last.
           */
          order?: "asc" | "desc";
        };
      };
      responses: {
        /** Return the information about the history of a specific asset */
        200: {
          content: {
            "application/json": components["schemas"]["asset_transactions"];
          };
        };
        400: components["responses"]["400"];
        403: components["responses"]["403"];
        404: components["responses"]["404"];
        418: components["responses"]["418"];
        429: components["responses"]["429"];
        500: components["responses"]["500"];
      };
    };
  };
  "/assets/{asset}/addresses": {
    /** List of a addresses containing a specific asset */
    get: {
      parameters: {
        path: {
          /** Concatenation of the policy_id and hex-encoded asset_name */
          asset: string;
        };
        query: {
          /** The number of results displayed on one page. */
          count?: number;
          /** The page number for listing the results. */
          page?: number;
          /**
           * The ordering of items from the point of view of the blockchain,
           * not the page listing itself. By default, we return oldest first, newest last.
           */
          order?: "asc" | "desc";
        };
      };
      responses: {
        /** Return the information about the history of a specific asset */
        200: {
          content: {
            "application/json": components["schemas"]["asset_addresses"];
          };
        };
        400: components["responses"]["400"];
        403: components["responses"]["403"];
        404: components["responses"]["404"];
        418: components["responses"]["418"];
        429: components["responses"]["429"];
        500: components["responses"]["500"];
      };
    };
  };
  "/assets/policy/{policy_id}": {
    /** List of asset minted under a specific policy */
    get: {
      parameters: {
        path: {
          /** Specific policy_id */
          policy_id: string;
        };
        query: {
          /** The number of results displayed on one page. */
          count?: number;
          /** The page number for listing the results. */
          page?: number;
          /**
           * The ordering of items from the point of view of the blockchain,
           * not the page listing itself. By default, we return oldest first, newest last.
           */
          order?: "asc" | "desc";
        };
      };
      responses: {
        /** Return the information about a specific asset */
        200: {
          content: {
            "application/json": components["schemas"]["asset_policy"];
          };
        };
        400: components["responses"]["400"];
        403: components["responses"]["403"];
        404: components["responses"]["404"];
        418: components["responses"]["418"];
        429: components["responses"]["429"];
        500: components["responses"]["500"];
      };
    };
  };
  "/scripts": {
    /** List of scripts. */
    get: {
      parameters: {
        query: {
          /** The number of results displayed on one page. */
          count?: number;
          /** The page number for listing the results. */
          page?: number;
          /**
           * The ordering of items from the point of view of the blockchain,
           * not the page listing itself. By default, we return oldest first, newest last.
           */
          order?: "asc" | "desc";
        };
      };
      responses: {
        /** Return list of scripts */
        200: {
          content: {
            "application/json": components["schemas"]["scripts"];
          };
        };
        400: components["responses"]["400"];
        403: components["responses"]["403"];
        404: components["responses"]["404"];
        418: components["responses"]["418"];
        429: components["responses"]["429"];
        500: components["responses"]["500"];
      };
    };
  };
  "/scripts/{script_hash}": {
    /** Information about a specific script */
    get: {
      parameters: {
        path: {
          /** Hash of the script */
          script_hash: string;
        };
      };
      responses: {
        /** Return the information about a specific script */
        200: {
          content: {
            "application/json": components["schemas"]["script"];
          };
        };
        400: components["responses"]["400"];
        403: components["responses"]["403"];
        404: components["responses"]["404"];
        418: components["responses"]["418"];
        429: components["responses"]["429"];
        500: components["responses"]["500"];
      };
    };
  };
  "/scripts/{script_hash}/json": {
    /** JSON representation of a `timelock` script */
    get: {
      parameters: {
        path: {
          /** Hash of the script */
          script_hash: string;
        };
      };
      responses: {
        /** Return the JSON representation of a `timelock` script */
        200: {
          content: {
            "application/json": components["schemas"]["script_json"];
          };
        };
        400: components["responses"]["400"];
        403: components["responses"]["403"];
        404: components["responses"]["404"];
        418: components["responses"]["418"];
        429: components["responses"]["429"];
        500: components["responses"]["500"];
      };
    };
  };
  "/scripts/{script_hash}/cbor": {
    /** CBOR representation of a `plutus` script */
    get: {
      parameters: {
        path: {
          /** Hash of the script */
          script_hash: string;
        };
      };
      responses: {
        /** Return the CBOR representation of a `plutus` script */
        200: {
          content: {
            "application/json": components["schemas"]["script_cbor"];
          };
        };
        400: components["responses"]["400"];
        403: components["responses"]["403"];
        404: components["responses"]["404"];
        418: components["responses"]["418"];
        429: components["responses"]["429"];
        500: components["responses"]["500"];
      };
    };
  };
  "/scripts/{script_hash}/redeemers": {
    /** List of redeemers of a specific script */
    get: {
      parameters: {
        path: {
          /** Hash of the script */
          script_hash: string;
        };
        query: {
          /** The number of results displayed on one page. */
          count?: number;
          /** The page number for listing the results. */
          page?: number;
          /**
           * The ordering of items from the point of view of the blockchain,
           * not the page listing itself. By default, we return oldest first, newest last.
           */
          order?: "asc" | "desc";
        };
      };
      responses: {
        /** Return the information about redeemers of a specific script */
        200: {
          content: {
            "application/json": components["schemas"]["script_redeemers"];
          };
        };
        400: components["responses"]["400"];
        403: components["responses"]["403"];
        404: components["responses"]["404"];
        418: components["responses"]["418"];
        429: components["responses"]["429"];
        500: components["responses"]["500"];
      };
    };
  };
  "/scripts/datum/{datum_hash}": {
    /** Query JSON value of a datum by its hash */
    get: {
      parameters: {
        path: {
          /** Hash of the datum */
          datum_hash: string;
        };
      };
      responses: {
        /** Return the datum value */
        200: {
          content: {
            "application/json": components["schemas"]["script_datum"];
          };
        };
        400: components["responses"]["400"];
        403: components["responses"]["403"];
        404: components["responses"]["404"];
        418: components["responses"]["418"];
        429: components["responses"]["429"];
        500: components["responses"]["500"];
      };
    };
  };
  "/scripts/datum/{datum_hash}/cbor": {
    /** Query CBOR serialised datum by its hash */
    get: {
      parameters: {
        path: {
          /** Hash of the datum */
          datum_hash: string;
        };
      };
      responses: {
        /** Return the CBOR serialised datum value */
        200: {
          content: {
            "application/json": components["schemas"]["script_datum_cbor"];
          };
        };
        400: components["responses"]["400"];
        403: components["responses"]["403"];
        404: components["responses"]["404"];
        418: components["responses"]["418"];
        429: components["responses"]["429"];
        500: components["responses"]["500"];
      };
    };
  };
  "/utils/addresses/xpub/{xpub}/{role}/{index}": {
    /** Derive Shelley address from an xpub */
    get: {
      parameters: {
        path: {
          /** Hex xpub */
          xpub: string;
          /** Account role */
          role: number;
          /** Address index */
          index: number;
        };
      };
      responses: {
        /** Return derivated Shelley address */
        200: {
          content: {
            "application/json": components["schemas"]["utils_addresses_xpub"];
          };
        };
        400: components["responses"]["400"];
        403: components["responses"]["403"];
        404: components["responses"]["404"];
        418: components["responses"]["418"];
        429: components["responses"]["429"];
        500: components["responses"]["500"];
      };
    };
  };
  "/utils/txs/evaluate": {
    /** Submit an already serialized transaction to evaluate how much execution units it requires. */
    post: {
      parameters: {
        header: {
          "Content-Type": "application/cbor";
        };
      };
      responses: {
        /** Returns result of EvaluateTx function from Ogmios see <a href="https://ogmios.dev/mini-protocols/local-tx-submission/#evaluatetx">EvaluateTx</a> and <a href="https://ogmios.dev/api/modules/_cardano_ogmios_client.TxSubmission.evaluationErrors.html">related errors</a>. */
        200: {
          content: {
            "application/json": { [key: string]: unknown };
          };
        };
        400: components["responses"]["400"];
        403: components["responses"]["403"];
        404: components["responses"]["404"];
        418: components["responses"]["418"];
        425: components["responses"]["425"];
        429: components["responses"]["429"];
        500: components["responses"]["500"];
      };
    };
  };
  "/ipfs/add": {
    /**
     * You need to `/ipfs/pin/add` an object to avoid it being garbage collected. This usage
     * is being counted in your user account quota.
     */
    post: {
      responses: {
        /** Returns information about added IPFS object */
        200: {
          content: {
            "application/json": {
              /**
               * @description Name of the file
               * @example README.md
               */
              name: string;
              /**
               * @description IPFS hash of the file
               * @example QmZbHqiCxKEVX7QfijzJTkZiSi3WEVTcvANgNAWzDYgZDr
               */
              ipfs_hash: string;
              /**
               * @description IPFS node size in Bytes
               * @example 125297
               */
              size: string;
            };
          };
        };
        400: components["responses"]["400"];
        403: components["responses"]["403"];
        404: components["responses"]["404"];
        418: components["responses"]["418"];
        429: components["responses"]["429"];
        500: components["responses"]["500"];
      };
    };
  };
  "/ipfs/gateway/{IPFS_path}": {
    /** Retrieve an object from the IPFS gateway (useful if you do not want to rely on a public gateway, such as `ipfs.blockfrost.dev`). */
    get: {
      parameters: {
        path: {
          IPFS_path: string;
        };
      };
      responses: {
        /** Returns the object content */
        200: unknown;
        400: components["responses"]["400"];
        403: components["responses"]["403"];
        404: components["responses"]["404"];
        418: components["responses"]["418"];
        429: components["responses"]["429"];
        500: components["responses"]["500"];
      };
    };
  };
  "/ipfs/pin/add/{IPFS_path}": {
    /** Pinned objects are counted in your user storage quota. */
    post: {
      parameters: {
        path: {
          IPFS_path: string;
        };
      };
      responses: {
        /** Returns pinned object */
        200: {
          content: {
            "application/json": {
              /**
               * @description IPFS hash of the pinned object
               * @example QmPojRfAXYAXV92Dof7gtSgaVuxEk64xx9CKvprqu9VwA8
               */
              ipfs_hash: string;
              /**
               * @description State of the pin action
               * @example queued
               * @enum {string}
               */
              state: "queued|pinned|unpinned|failed|gc";
            };
          };
        };
        400: components["responses"]["400"];
        403: components["responses"]["403"];
        404: components["responses"]["404"];
        418: components["responses"]["418"];
        429: components["responses"]["429"];
        500: components["responses"]["500"];
      };
    };
  };
  "/ipfs/pin/list": {
    /** List objects pinned to local storage */
    get: {
      parameters: {
        query: {
          /** The number of results displayed on one page. */
          count?: number;
          /** The page number for listing the results. */
          page?: number;
          /**
           * The ordering of items from the point of view of the blockchain,
           * not the page listing itself. By default, we return oldest first, newest last.
           */
          order?: "asc" | "desc";
        };
      };
      responses: {
        /** Returns pinned objects */
        200: {
          content: {
            "application/json": {
              /**
               * @description Creation time of the IPFS object on our backends
               * @example 1615551024
               */
              time_created: number;
              /**
               * @description Pin time of the IPFS object on our backends
               * @example 1615551024
               */
              time_pinned: number;
              /**
               * @description IPFS hash of the pinned object
               * @example QmdVMnULrY95mth2XkwjxDtMHvzuzmvUPTotKE1tgqKbCx
               */
              ipfs_hash: string;
              /**
               * @description Size of the object in Bytes
               * @example 1615551024
               */
              size: string;
              /**
               * @description State of the pinned object, which is `queued` when we are retriving object. If this
               * is successful the state is changed to `pinned` or `failed` if not. The state `gc` means the
               * pinned item has been garbage collected due to account being over storage quota or after it has
               * been moved to `unpinned` state by removing the object pin.
               *
               * @example pinned
               * @enum {string}
               */
              state: "queued|pinned|unpinned|failed|gc";
            }[];
          };
        };
        400: components["responses"]["400"];
        403: components["responses"]["403"];
        404: components["responses"]["404"];
        418: components["responses"]["418"];
        429: components["responses"]["429"];
        500: components["responses"]["500"];
      };
    };
  };
  "/ipfs/pin/list/{IPFS_path}": {
    /** Get information about locally pinned IPFS object */
    get: {
      parameters: {
        path: {
          IPFS_path: string;
        };
      };
      responses: {
        /** Returns the pins pinned */
        200: {
          content: {
            "application/json": {
              /**
               * @description Time of the creation of the IPFS object on our backends
               * @example 1615551024
               */
              time_created: number;
              /**
               * @description Time of the pin of the IPFS object on our backends
               * @example 1615551024
               */
              time_pinned: number;
              /**
               * @description IPFS hash of the pinned object
               * @example QmdVMnULrY95mth2XkwjxDtMHvzuzmvUPTotKE1tgqKbCx
               */
              ipfs_hash: string;
              /**
               * @description Size of the object in Bytes
               * @example 1615551024
               */
              size: string;
              /**
               * @description State of the pinned object. We define 5 states: `queued`, `pinned`, `unpinned`, `failed`, `gc`.
               * When the object is pending retrieval (i.e. after `/ipfs/pin/add/{IPFS_path}`), the state is `queued`.
               * If the object is already successfully retrieved, state is changed to `pinned` or `failed` otherwise.
               * When object is unpinned (i.e. after `/ipfs/pin/remove/{IPFS_path}`) it is marked for garbage collection.
               * State `gc` means that a previously `unpinned` item has been garbage collected due to account being over storage quota.
               *
               * @example pinned
               * @enum {string}
               */
              state: "queued|pinned|unpinned|failed|gc";
            };
          };
        };
        400: components["responses"]["400"];
        403: components["responses"]["403"];
        404: components["responses"]["404"];
        418: components["responses"]["418"];
        429: components["responses"]["429"];
        500: components["responses"]["500"];
      };
    };
  };
  "/ipfs/pin/remove/{IPFS_path}": {
    /** Remove pinned objects from local storage */
    post: {
      parameters: {
        path: {
          IPFS_path: string;
        };
      };
      responses: {
        /** Returns the pins removed */
        200: {
          content: {
            "application/json": {
              /**
               * @description IPFS hash of the pinned object
               * @example QmPojRfAXYAXV92Dof7gtSgaVuxEk64xx9CKvprqu9VwA8
               */
              ipfs_hash: string;
              /**
               * @description State of the pin action
               * @example unpinned
               * @enum {string}
               */
              state: "queued|pinned|unpinned|failed|gc";
            };
          };
        };
        400: components["responses"]["400"];
        403: components["responses"]["403"];
        404: components["responses"]["404"];
        418: components["responses"]["418"];
        429: components["responses"]["429"];
        500: components["responses"]["500"];
      };
    };
  };
  "/metrics/": {
    /** History of your Blockfrost usage metrics in the past 30 days. */
    get: {
      responses: {
        /** Return the last 30 days of metrics */
        200: {
          content: {
            "application/json": components["schemas"]["metrics"];
          };
        };
        400: components["responses"]["400"];
        403: components["responses"]["403"];
        404: components["responses"]["404"];
        418: components["responses"]["418"];
        429: components["responses"]["429"];
        500: components["responses"]["500"];
      };
    };
  };
  "/metrics/endpoints": {
    /** History of your Blockfrost usage metrics per endpoint in the past 30 days. */
    get: {
      responses: {
        /** Return the last 30 days of metrics */
        200: {
          content: {
            "application/json": components["schemas"]["metrics_endpoints"];
          };
        };
        400: components["responses"]["400"];
        403: components["responses"]["403"];
        404: components["responses"]["404"];
        418: components["responses"]["418"];
        429: components["responses"]["429"];
        500: components["responses"]["500"];
      };
    };
  };
  "/network": {
    /** Return detailed network information. */
    get: {
      responses: {
        /** Return detailed network information. */
        200: {
          content: {
            "application/json": components["schemas"]["network"];
          };
        };
        400: components["responses"]["400"];
        403: components["responses"]["403"];
        404: components["responses"]["404"];
        418: components["responses"]["418"];
        429: components["responses"]["429"];
        500: components["responses"]["500"];
      };
    };
  };
  "/nutlink/{address}": {
    /** List metadata about specific address */
    get: {
      parameters: {
        path: {
          address: string;
        };
      };
      responses: {
        /** Return the metadata about metadata oracle */
        200: {
          content: {
            "application/json": components["schemas"]["nutlink_address"];
          };
        };
        400: components["responses"]["400"];
        403: components["responses"]["403"];
        404: components["responses"]["404"];
        418: components["responses"]["418"];
        429: components["responses"]["429"];
        500: components["responses"]["500"];
      };
    };
  };
  "/nutlink/{address}/tickers": {
    /** List of records of a specific ticker */
    get: {
      parameters: {
        path: {
          address: string;
        };
        query: {
          /** The number of results displayed on one page. */
          count?: number;
          /** The page number for listing the results. */
          page?: number;
          /**
           * The ordering of items from the point of view of the blockchain,
           * not the page listing itself. By default, we return oldest first, newest last.
           */
          order?: "asc" | "desc";
        };
      };
      responses: {
        /** Return the tickers provided by the metadata oracle */
        200: {
          content: {
            "application/json": components["schemas"]["nutlink_address_tickers"];
          };
        };
        400: components["responses"]["400"];
        403: components["responses"]["403"];
        404: components["responses"]["404"];
        418: components["responses"]["418"];
        429: components["responses"]["429"];
        500: components["responses"]["500"];
      };
    };
  };
  "/nutlink/{address}/tickers/{ticker}": {
    /** List of records of a specific ticker */
    get: {
      parameters: {
        path: {
          address: string;
          ticker: string;
        };
        query: {
          /** The number of results displayed on one page. */
          count?: number;
          /** The page number for listing the results. */
          page?: number;
          /**
           * The ordering of items from the point of view of the blockchain,
           * not the page listing itself. By default, we return oldest first, newest last.
           */
          order?: "asc" | "desc";
        };
      };
      responses: {
        /** Return the tickers provided by the metadata oracle */
        200: {
          content: {
            "application/json": components["schemas"]["nutlink_address_ticker"];
          };
        };
        400: components["responses"]["400"];
        403: components["responses"]["403"];
        404: components["responses"]["404"];
        418: components["responses"]["418"];
        429: components["responses"]["429"];
        500: components["responses"]["500"];
      };
    };
  };
  "/nutlink/tickers/{ticker}": {
    /** List of records of a specific ticker */
    get: {
      parameters: {
        path: {
          ticker: string;
        };
        query: {
          /** The number of results displayed on one page. */
          count?: number;
          /** The page number for listing the results. */
          page?: number;
          /**
           * The ordering of items from the point of view of the blockchain,
           * not the page listing itself. By default, we return oldest first, newest last.
           */
          order?: "asc" | "desc";
        };
      };
      responses: {
        /** Return the tickers provided by the metadata oracle */
        200: {
          content: {
            "application/json": components["schemas"]["nutlink_tickers_ticker"];
          };
        };
        400: components["responses"]["400"];
        403: components["responses"]["403"];
        404: components["responses"]["404"];
        418: components["responses"]["418"];
        429: components["responses"]["429"];
        500: components["responses"]["500"];
      };
    };
  };
}

export interface components {
  schemas: {
    block_content: {
      /**
       * @description Block creation time in UNIX time
       * @example 1641338934
       */
      time: number;
      /**
       * @description Block number
       * @example 15243593
       */
      height: number | null;
      /**
       * @description Hash of the block
       * @example 4ea1ba291e8eef538635a53e59fddba7810d1679631cc3aed7c8e6c4091a516a
       */
      hash: string;
      /**
       * @description Slot number
       * @example 412162133
       */
      slot: number | null;
      /**
       * @description Epoch number
       * @example 425
       */
      epoch: number | null;
      /**
       * @description Slot within the epoch
       * @example 12
       */
      epoch_slot: number | null;
      /**
       * @description Bech32 ID of the slot leader or specific block description in case there is no slot leader
       * @example pool1pu5jlj4q9w9jlxeu370a3c9myx47md5j5m2str0naunn2qnikdy
       */
      slot_leader: string;
      /**
       * @description Block size in Bytes
       * @example 3
       */
      size: number;
      /**
       * @description Number of transactions in the block
       * @example 1
       */
      tx_count: number;
      /**
       * @description Total output within the block in Lovelaces
       * @example 128314491794
       */
      output: string | null;
      /**
       * @description Total fees within the block in Lovelaces
       * @example 592661
       */
      fees: string | null;
      /**
       * @description VRF key of the block
       * @example vrf_vk1wf2k6lhujezqcfe00l6zetxpnmh9n6mwhpmhm0dvfh3fxgmdnrfqkms8ty
       */
      block_vrf: string | null;
      /**
       * @description Hash of the previous block
       * @example 43ebccb3ac72c7cebd0d9b755a4b08412c9f5dcb81b8a0ad1e3c197d29d47b05
       */
      previous_block: string | null;
      /**
       * @description Hash of the next block
       * @example 8367f026cf4b03e116ff8ee5daf149b55ba5a6ec6dec04803b8dc317721d15fa
       */
      next_block: string | null;
      /**
       * @description Number of block confirmations
       * @example 4698
       */
      confirmations: number;
    };
    /**
     * @example [
     *   "8788591983aa73981fc92d6cddbbe643959f5a784e84b8bee0db15823f575a5b",
     *   "4eef6bb7755d8afbeac526b799f3e32a624691d166657e9d862aaeb66682c036",
     *   "52e748c4dec58b687b90b0b40d383b9fe1f24c1a833b7395cdf07dd67859f46f",
     *   "e8073fd5318ff43eca18a852527166aa8008bee9ee9e891f585612b7e4ba700b"
     * ]
     */
    block_content_txs: string[];
    block_content_array: components["schemas"]["block_content"][];
    /**
     * @example [
     *   {
     *     "address": "addr1q9ld26v2lv8wvrxxmvg90pn8n8n5k6tdst06q2s856rwmvnueldzuuqmnsye359fqrk8hwvenjnqultn7djtrlft7jnq7dy7wv",
     *     "transactions": [
     *       {
     *         "tx_hash": "1a0570af966fb355a7160e4f82d5a80b8681b7955f5d44bec0dce628516157f0"
     *       }
     *     ]
     *   },
     *   {
     *     "address": "addr1qxqs59lphg8g6qndelq8xwqn60ag3aeyfcp33c2kdp46a09re5df3pzwwmyq946axfcejy5n4x0y99wqpgtp2gd0k09qsgy6pz",
     *     "transactions": [
     *       {
     *         "tx_hash": "1a0570af966fb355a7160e4f82d5a80b8681b7955f5d44bec0dce628516157d0"
     *       }
     *     ]
     *   }
     * ]
     */
    block_content_addresses: {
      /** @description Address that was affected in the specified block */
      address: string;
      /** @description List of transactions containing the address either in their inputs or outputs. Sorted by transaction index within a block, ascending. */
      transactions: {
        tx_hash: string;
      }[];
    }[];
    genesis_content: {
      /**
       * @description The proportion of slots in which blocks should be issued
       * @example 0.05
       */
      active_slots_coefficient: number;
      /**
       * @description Determines the quorum needed for votes on the protocol parameter updates
       * @example 5
       */
      update_quorum: number;
      /**
       * @description The total number of lovelace in the system
       * @example 45000000000000000
       */
      max_lovelace_supply: string;
      /**
       * @description Network identifier
       * @example 764824073
       */
      network_magic: number;
      /**
       * @description Number of slots in an epoch
       * @example 432000
       */
      epoch_length: number;
      /**
       * @description Time of slot 0 in UNIX time
       * @example 1506203091
       */
      system_start: number;
      /**
       * @description Number of slots in an KES period
       * @example 129600
       */
      slots_per_kes_period: number;
      /**
       * @description Duration of one slot in seconds
       * @example 1
       */
      slot_length: number;
      /**
       * @description The maximum number of time a KES key can be evolved before a pool operator must create a new operational certificate
       * @example 62
       */
      max_kes_evolutions: number;
      /**
       * @description Security parameter k
       * @example 2160
       */
      security_param: number;
    };
    epoch_content: {
      /**
       * @description Epoch number
       * @example 225
       */
      epoch: number;
      /**
       * @description Unix time of the start of the epoch
       * @example 1603403091
       */
      start_time: number;
      /**
       * @description Unix time of the end of the epoch
       * @example 1603835086
       */
      end_time: number;
      /**
       * @description Unix time of the first block of the epoch
       * @example 1603403092
       */
      first_block_time: number;
      /**
       * @description Unix time of the last block of the epoch
       * @example 1603835084
       */
      last_block_time: number;
      /**
       * @description Number of blocks within the epoch
       * @example 21298
       */
      block_count: number;
      /**
       * @description Number of transactions within the epoch
       * @example 17856
       */
      tx_count: number;
      /**
       * @description Sum of all the transactions within the epoch in Lovelaces
       * @example 7849943934049314
       */
      output: string;
      /**
       * @description Sum of all the fees within the epoch in Lovelaces
       * @example 4203312194
       */
      fees: string;
      /**
       * @description Sum of all the active stakes within the epoch in Lovelaces
       * @example 784953934049314
       */
      active_stake: string | null;
    };
    epoch_param_content: {
      /**
       * @description Epoch number
       * @example 225
       */
      epoch: number;
      /**
       * @description The linear factor for the minimum fee calculation for given epoch
       * @example 44
       */
      min_fee_a: number;
      /**
       * @description The constant factor for the minimum fee calculation
       * @example 155381
       */
      min_fee_b: number;
      /**
       * @description Maximum block body size in Bytes
       * @example 65536
       */
      max_block_size: number;
      /**
       * @description Maximum transaction size
       * @example 16384
       */
      max_tx_size: number;
      /**
       * @description Maximum block header size
       * @example 1100
       */
      max_block_header_size: number;
      /**
       * @description The amount of a key registration deposit in Lovelaces
       * @example 2000000
       */
      key_deposit: string;
      /**
       * @description The amount of a pool registration deposit in Lovelaces
       * @example 500000000
       */
      pool_deposit: string;
      /**
       * @description Epoch bound on pool retirement
       * @example 18
       */
      e_max: number;
      /**
       * @description Desired number of pools
       * @example 150
       */
      n_opt: number;
      /**
       * @description Pool pledge influence
       * @example 0.3
       */
      a0: number;
      /**
       * @description Monetary expansion
       * @example 0.003
       */
      rho: number;
      /**
       * @description Treasury expansion
       * @example 0.2
       */
      tau: number;
      /**
       * @description Percentage of blocks produced by federated nodes
       * @example 0.5
       */
      decentralisation_param: number;
      /**
       * @description Seed for extra entropy
       * @example null
       */
      extra_entropy: { [key: string]: unknown } | null;
      /**
       * @description Accepted protocol major version
       * @example 2
       */
      protocol_major_ver: number;
      /**
       * @description Accepted protocol minor version
       * @example 0
       */
      protocol_minor_ver: number;
      /**
       * @description Minimum UTXO value
       * @example 1000000
       */
      min_utxo: string;
      /**
       * @description Minimum stake cost forced on the pool
       * @example 340000000
       */
      min_pool_cost: string;
      /**
       * @description Epoch number only used once
       * @example 1a3be38bcbb7911969283716ad7aa550250226b76a61fc51cc9a9a35d9276d81
       */
      nonce: string;
      /**
       * @description The per word cost of script memory usage
       * @example 0.0577
       */
      price_mem: number | null;
      /**
       * @description The cost of script execution step usage
       * @example 0.0000721
       */
      price_step: number | null;
      /**
       * @description The maximum number of execution memory allowed to be used in a single transaction
       * @example 10000000
       */
      max_tx_ex_mem: string | null;
      /**
       * @description The maximum number of execution steps allowed to be used in a single transaction
       * @example 10000000000
       */
      max_tx_ex_steps: string | null;
      /**
       * @description The maximum number of execution memory allowed to be used in a single block
       * @example 50000000
       */
      max_block_ex_mem: string | null;
      /**
       * @description The maximum number of execution steps allowed to be used in a single block
       * @example 40000000000
       */
      max_block_ex_steps: string | null;
      /**
       * @description The maximum Val size
       * @example 5000
       */
      max_val_size: string | null;
      /**
       * @description The percentage of the transactions fee which must be provided as collateral when including non-native scripts
       * @example 150
       */
      collateral_percent: number | null;
      /**
       * @description The maximum number of collateral inputs allowed in a transaction
       * @example 3
       */
      max_collateral_inputs: number | null;
      /**
       * @description Cost per UTxO word for Alonzo. Cost per UTxO byte for Babbage and later.
       * @example 34482
       */
      coins_per_utxo_size: string | null;
      /**
       * @deprecated
       * @description Cost per UTxO word for Alonzo. Cost per UTxO byte for Babbage and later.
       * @example 34482
       */
      coins_per_utxo_word: string | null;
    };
    epoch_content_array: components["schemas"]["epoch_content"][];
    epoch_stake_content: {
      /**
       * @description Stake address
       * @example stake1u9l5q5jwgelgagzyt6nuaasefgmn8pd25c8e9qpeprq0tdcp0e3uk
       */
      stake_address: string;
      /**
       * @description Bech32 prefix of the pool delegated to
       * @example pool1pu5jlj4q9w9jlxeu370a3c9myx47md5j5m2str0naunn2q3lkdy
       */
      pool_id: string;
      /**
       * @description Amount of active delegated stake in Lovelaces
       * @example 4440295078
       */
      amount: string;
    }[];
    epoch_stake_pool_content: {
      /**
       * @description Stake address
       * @example stake1u9l5q5jwgelgagzyt6nuaasefgmn8pd25c8e9qpeprq0tdcp0e3uk
       */
      stake_address: string;
      /**
       * @description Amount of active delegated stake in Lovelaces
       * @example 4440295078
       */
      amount: string;
    }[];
    /**
     * @example [
     *   "d0fa315687e99ccdc96b14cc2ea74a767405d64427b648c470731a9b69e4606e",
     *   "38bc6efb92a830a0ed22a64f979d120d26483fd3c811f6622a8c62175f530878",
     *   "f3258fcd8b975c061b4fcdcfcbb438807134d6961ec278c200151274893b6b7d"
     * ]
     */
    epoch_block_content: string[];
    tx_content: {
      /**
       * @description Transaction hash
       * @example 1e043f100dce12d107f679685acd2fc0610e10f72a92d412794c9773d11d8477
       */
      hash: string;
      /**
       * @description Block hash
       * @example 356b7d7dbb696ccd12775c016941057a9dc70898d87a63fc752271bb46856940
       */
      block: string;
      /**
       * @description Block number
       * @example 123456
       */
      block_height: number;
      /**
       * @description Block creation time in UNIX time
       * @example 1635505891
       */
      block_time: number;
      /**
       * @description Slot number
       * @example 42000000
       */
      slot: number;
      /**
       * @description Transaction index within the block
       * @example 1
       */
      index: number;
      /**
       * @example [
       *   {
       *     "unit": "lovelace",
       *     "quantity": "42000000"
       *   },
       *   {
       *     "unit": "b0d07d45fe9514f80213f4020e5a61241458be626841cde717cb38a76e7574636f696e",
       *     "quantity": "12"
       *   }
       * ]
       */
      output_amount: {
        /**
         * Format: Lovelace or concatenation of asset policy_id and hex-encoded asset_name
         * @description The unit of the value
         */
        unit: string;
        /** @description The quantity of the unit */
        quantity: string;
      }[];
      /**
       * @description Fees of the transaction in Lovelaces
       * @example 182485
       */
      fees: string;
      /**
       * @description Deposit within the transaction in Lovelaces
       * @example 0
       */
      deposit: string;
      /**
       * @description Size of the transaction in Bytes
       * @example 433
       */
      size: number;
      /**
       * @description Left (included) endpoint of the timelock validity intervals
       * @example null
       */
      invalid_before: string | null;
      /**
       * @description Right (excluded) endpoint of the timelock validity intervals
       * @example 13885913
       */
      invalid_hereafter: string | null;
      /**
       * @description Count of UTXOs within the transaction
       * @example 4
       */
      utxo_count: number;
      /**
       * @description Count of the withdrawals within the transaction
       * @example 0
       */
      withdrawal_count: number;
      /**
       * @description Count of the MIR certificates within the transaction
       * @example 0
       */
      mir_cert_count: number;
      /**
       * @description Count of the delegations within the transaction
       * @example 0
       */
      delegation_count: number;
      /**
       * @description Count of the stake keys (de)registration within the transaction
       * @example 0
       */
      stake_cert_count: number;
      /**
       * @description Count of the stake pool registration and update certificates within the transaction
       * @example 0
       */
      pool_update_count: number;
      /**
       * @description Count of the stake pool retirement certificates within the transaction
       * @example 0
       */
      pool_retire_count: number;
      /**
       * @description Count of asset mints and burns within the transaction
       * @example 0
       */
      asset_mint_or_burn_count: number;
      /**
       * @description Count of redeemers within the transaction
       * @example 0
       */
      redeemer_count: number;
      /**
       * @description True if contract script passed validation
       * @example true
       */
      valid_contract: boolean;
    };
    tx_content_utxo: {
      /**
       * @description Transaction hash
       * @example 1e043f100dce12d107f679685acd2fc0610e10f72a92d412794c9773d11d8477
       */
      hash: string;
      inputs: {
        /**
         * @description Input address
         * @example addr1q9ld26v2lv8wvrxxmvg90pn8n8n5k6tdst06q2s856rwmvnueldzuuqmnsye359fqrk8hwvenjnqultn7djtrlft7jnq7dy7wv
         */
        address: string;
        /**
         * @example [
         *   {
         *     "unit": "lovelace",
         *     "quantity": "42000000"
         *   },
         *   {
         *     "unit": "b0d07d45fe9514f80213f4020e5a61241458be626841cde717cb38a76e7574636f696e",
         *     "quantity": "12"
         *   }
         * ]
         */
        amount: {
          /**
           * Format: Lovelace or concatenation of asset policy_id and hex-encoded asset_name
           * @description The unit of the value
           */
          unit: string;
          /** @description The quantity of the unit */
          quantity: string;
        }[];
        /**
         * @description Hash of the UTXO transaction
         * @example 1a0570af966fb355a7160e4f82d5a80b8681b7955f5d44bec0dce628516157f0
         */
        tx_hash: string;
        /**
         * @description UTXO index in the transaction
         * @example 0
         */
        output_index: number;
        /**
         * @description The hash of the transaction output datum
         * @example 9e478573ab81ea7a8e31891ce0648b81229f408d596a3483e6f4f9b92d3cf710
         */
        data_hash: string | null;
        /**
         * @description CBOR encoded inline datum
         * @example 19a6aa
         */
        inline_datum: string | null;
        /**
         * @description The hash of the reference script of the input
         * @example 13a3efd825703a352a8f71f4e2758d08c28c564e8dfcce9f77776ad1
         */
        reference_script_hash: string | null;
        /**
         * @description Whether the input is a collateral consumed on script validation failure
         * @example false
         */
        collateral: boolean;
        /**
         * @description Whether the input is a reference transaction input
         * @example false
         */
        reference?: boolean;
      }[];
      outputs: {
        /**
         * @description Output address
         * @example addr1q9ld26v2lv8wvrxxmvg90pn8n8n5k6tdst06q2s856rwmvnueldzuuqmnsye359fqrk8hwvenjnqultn7djtrlft7jnq7dy7wv
         */
        address: string;
        /**
         * @example [
         *   {
         *     "unit": "lovelace",
         *     "quantity": "42000000"
         *   },
         *   {
         *     "unit": "b0d07d45fe9514f80213f4020e5a61241458be626841cde717cb38a76e7574636f696e",
         *     "quantity": "12"
         *   }
         * ]
         */
        amount: {
          /**
           * Format: Lovelace or concatenation of asset policy_id and hex-encoded asset_name
           * @description The unit of the value
           */
          unit: string;
          /** @description The quantity of the unit */
          quantity: string;
        }[];
        /**
         * @description UTXO index in the transaction
         * @example 0
         */
        output_index: number;
        /**
         * @description The hash of the transaction output datum
         * @example 9e478573ab81ea7a8e31891ce0648b81229f408d596a3483e6f4f9b92d3cf710
         */
        data_hash: string | null;
        /**
         * @description CBOR encoded inline datum
         * @example 19a6aa
         */
        inline_datum: string | null;
        /**
         * @description The hash of the reference script of the output
         * @example 13a3efd825703a352a8f71f4e2758d08c28c564e8dfcce9f77776ad1
         */
        reference_script_hash: string | null;
      }[];
    };
    tx_content_stake_addr: {
      /**
       * @description Index of the certificate within the transaction
       * @example 0
       */
      cert_index: number;
      /**
       * @description Delegation stake address
       * @example stake1u9t3a0tcwune5xrnfjg4q7cpvjlgx9lcv0cuqf5mhfjwrvcwrulda
       */
      address: string;
      /**
       * @description Registration boolean, false if deregistration
       * @example true
       */
      registration: boolean;
    }[];
    tx_content_delegations: {
      /**
       * @deprecated
       * @description Index of the certificate within the transaction
       * @example 0
       */
      index: number;
      /**
       * @description Index of the certificate within the transaction
       * @example 0
       */
      cert_index: number;
      /**
       * @description Bech32 delegation stake address
       * @example stake1u9r76ypf5fskppa0cmttas05cgcswrttn6jrq4yd7jpdnvc7gt0yc
       */
      address: string;
      /**
       * @description Bech32 ID of delegated stake pool
       * @example pool1pu5jlj4q9w9jlxeu370a3c9myx47md5j5m2str0naunn2q3lkdy
       */
      pool_id: string;
      /**
       * @description Epoch in which the delegation becomes active
       * @example 210
       */
      active_epoch: number;
    }[];
    tx_content_withdrawals: {
      /**
       * @description Bech32 withdrawal address
       * @example stake1u9r76ypf5fskppa0cmttas05cgcswrttn6jrq4yd7jpdnvc7gt0yc
       */
      address: string;
      /**
       * @description Withdrawal amount in Lovelaces
       * @example 431833601
       */
      amount: string;
    }[];
    tx_content_mirs: {
      /**
       * @description Source of MIR funds
       * @example reserve
       * @enum {string}
       */
      pot: "reserve" | "treasury";
      /**
       * @description Index of the certificate within the transaction
       * @example 0
       */
      cert_index: number;
      /**
       * @description Bech32 stake address
       * @example stake1u9r76ypf5fskppa0cmttas05cgcswrttn6jrq4yd7jpdnvc7gt0yc
       */
      address: string;
      /**
       * @description MIR amount in Lovelaces
       * @example 431833601
       */
      amount: string;
    }[];
    tx_content_pool_certs: {
      /**
       * @description Index of the certificate within the transaction
       * @example 0
       */
      cert_index: number;
      /**
       * @description Bech32 encoded pool ID
       * @example pool1pu5jlj4q9w9jlxeu370a3c9myx47md5j5m2str0naunn2q3lkdy
       */
      pool_id: string;
      /**
       * @description VRF key hash
       * @example 0b5245f9934ec2151116fb8ec00f35fd00e0aa3b075c4ed12cce440f999d8233
       */
      vrf_key: string;
      /**
       * @description Stake pool certificate pledge in Lovelaces
       * @example 5000000000
       */
      pledge: string;
      /**
       * @description Margin tax cost of the stake pool
       * @example 0.05
       */
      margin_cost: number;
      /**
       * @description Fixed tax cost of the stake pool in Lovelaces
       * @example 340000000
       */
      fixed_cost: string;
      /**
       * @description Bech32 reward account of the stake pool
       * @example stake1uxkptsa4lkr55jleztw43t37vgdn88l6ghclfwuxld2eykgpgvg3f
       */
      reward_account: string;
      /**
       * @example [
       *   "stake1u98nnlkvkk23vtvf9273uq7cph5ww6u2yq2389psuqet90sv4xv9v"
       * ]
       */
      owners: string[];
      metadata: {
        /**
         * @description URL to the stake pool metadata
         * @example https://stakenuts.com/mainnet.json
         */
        url: string | null;
        /**
         * @description Hash of the metadata file
         * @example 47c0c68cb57f4a5b4a87bad896fc274678e7aea98e200fa14a1cb40c0cab1d8c
         */
        hash: string | null;
        /**
         * @description Ticker of the stake pool
         * @example NUTS
         */
        ticker: string | null;
        /**
         * @description Name of the stake pool
         * @example Stake Nuts
         */
        name: string | null;
        /**
         * @description Description of the stake pool
         * @example The best pool ever
         */
        description: string | null;
        /**
         * @description Home page of the stake pool
         * @example https://stakentus.com/
         */
        homepage: string | null;
      } | null;
      relays: {
        /**
         * @description IPv4 address of the relay
         * @example 4.4.4.4
         */
        ipv4: string | null;
        /**
         * @description IPv6 address of the relay
         * @example https://stakenuts.com/mainnet.json
         */
        ipv6: string | null;
        /**
         * @description DNS name of the relay
         * @example relay1.stakenuts.com
         */
        dns: string | null;
        /**
         * @description DNS SRV entry of the relay
         * @example _relays._tcp.relays.stakenuts.com
         */
        dns_srv: string | null;
        /**
         * @description Network port of the relay
         * @example 3001
         */
        port: number;
      }[];
      /**
       * @description Epoch in which the update becomes active
       * @example 210
       */
      active_epoch: number;
    }[];
    tx_content_pool_retires: {
      /**
       * @description Index of the certificate within the transaction
       * @example 0
       */
      cert_index: number;
      /**
       * @description Bech32 stake pool ID
       * @example pool1pu5jlj4q9w9jlxeu370a3c9myx47md5j5m2str0naunn2q3lkdy
       */
      pool_id: string;
      /**
       * @description Epoch in which the pool becomes retired
       * @example 216
       */
      retiring_epoch: number;
    }[];
    /**
     * @example [
     *   {
     *     "label": "1967",
     *     "json_metadata": {
     *       "metadata": "https://nut.link/metadata.json",
     *       "hash": "6bf124f217d0e5a0a8adb1dbd8540e1334280d49ab861127868339f43b3948af"
     *     }
     *   },
     *   {
     *     "label": "1968",
     *     "json_metadata": {
     *       "ADAUSD": [
     *         {
     *           "value": "0.10409800535729975",
     *           "source": "ergoOracles"
     *         }
     *       ]
     *     }
     *   }
     * ]
     */
    tx_content_metadata: {
      /** @description Metadata label */
      label: string;
      /** @description Content of the metadata */
      json_metadata: string | { [key: string]: unknown };
    }[];
    /**
     * @example [
     *   {
     *     "label": "1968",
     *     "cbor_metadata": "\\xa100a16b436f6d62696e6174696f6e8601010101010c",
     *     "metadata": "a100a16b436f6d62696e6174696f6e8601010101010c"
     *   }
     * ]
     */
    tx_content_metadata_cbor: {
      /** @description Metadata label */
      label: string;
      /**
       * @deprecated
       * @description Content of the CBOR metadata
       */
      cbor_metadata: string | null;
      /** @description Content of the CBOR metadata in hex */
      metadata: string | null;
    }[];
    tx_content_redeemers: {
      /**
       * @description Index of the redeemer within the transaction
       * @example 0
       */
      tx_index: number;
      /**
       * @description Validation purpose
       * @example spend
       * @enum {string}
       */
      purpose: "spend" | "mint" | "cert" | "reward";
      /**
       * @description Script hash
       * @example ec26b89af41bef0f7585353831cb5da42b5b37185e0c8a526143b824
       */
      script_hash: string;
      /**
       * @description Redeemer data hash
       * @example 923918e403bf43c34b4ef6b48eb2ee04babed17320d8d1b9ff9ad086e86f44ec
       */
      redeemer_data_hash: string;
      /**
       * @deprecated
       * @description Datum hash
       * @example 923918e403bf43c34b4ef6b48eb2ee04babed17320d8d1b9ff9ad086e86f44ec
       */
      datum_hash: string;
      /**
       * @description The budget in Memory to run a script
       * @example 1700
       */
      unit_mem: string;
      /**
       * @description The budget in CPU steps to run a script
       * @example 476468
       */
      unit_steps: string;
      /**
       * @description The fee consumed to run the script
       * @example 172033
       */
      fee: string;
    }[];
    account_content: {
      /**
       * @description Bech32 stake address
       * @example stake1ux3g2c9dx2nhhehyrezyxpkstartcqmu9hk63qgfkccw5rqttygt7
       */
      stake_address: string;
      /**
       * @description Registration state of an account
       * @example true
       */
      active: boolean;
      /**
       * @description Epoch of the most recent action - registration or deregistration
       * @example 412
       */
      active_epoch: number | null;
      /**
       * @description Balance of the account in Lovelaces
       * @example 619154618165
       */
      controlled_amount: string;
      /**
       * @description Sum of all rewards for the account in the Lovelaces
       * @example 319154618165
       */
      rewards_sum: string;
      /**
       * @description Sum of all the withdrawals for the account in Lovelaces
       * @example 12125369253
       */
      withdrawals_sum: string;
      /**
       * @description Sum of all  funds from reserves for the account in the Lovelaces
       * @example 319154618165
       */
      reserves_sum: string;
      /**
       * @description Sum of all funds from treasury for the account in the Lovelaces
       * @example 12000000
       */
      treasury_sum: string;
      /**
       * @description Sum of available rewards that haven't been withdrawn yet for the account in the Lovelaces
       * @example 319154618165
       */
      withdrawable_amount: string;
      /**
       * @description Bech32 pool ID that owns the account
       * @example pool1pu5jlj4q9w9jlxeu370a3c9myx47md5j5m2str0naunn2q3lkdy
       */
      pool_id: string | null;
    };
    /**
     * @example [
     *   {
     *     "epoch": 215,
     *     "amount": "12695385",
     *     "pool_id": "pool1pu5jlj4q9w9jlxeu370a3c9myx47md5j5m2str0naunn2q3lkdy",
     *     "type": "member"
     *   },
     *   {
     *     "epoch": 216,
     *     "amount": "3586329",
     *     "pool_id": "pool1pu5jlj4q9w9jlxeu370a3c9myx47md5j5m2str0naunn2q3lkdy",
     *     "type": "member"
     *   },
     *   {
     *     "epoch": 217,
     *     "amount": "1",
     *     "pool_id": "pool1pu5jlj4q9w9jlxeu370a3c9myx47md5j5m2str0naunn2q3lkdy",
     *     "type": "member"
     *   },
     *   {
     *     "epoch": 217,
     *     "amount": "1337",
     *     "pool_id": "pool1cytwr0n7eas6du2h2xshl8ypa1yqr18f0erlhhjcuczysiunjcs",
     *     "type": "leader"
     *   },
     *   {
     *     "epoch": 218,
     *     "amount": "1395265",
     *     "pool_id": "pool1pu5jlj4q9w9jlxeu370a3c9myx47md5j5m2str0naunn2q3lkdy",
     *     "type": "member"
     *   },
     *   {
     *     "epoch": 218,
     *     "amount": "500000000",
     *     "pool_id": "pool1cytwr0n7eas6du2h2xshl8ypa1yqr18f0erlhhjcuczysiunjcs",
     *     "type": "pool_deposit_refund"
     *   }
     * ]
     */
    account_reward_content: {
      /** @description Epoch of the associated reward */
      epoch: number;
      /** @description Rewards for given epoch in Lovelaces */
      amount: string;
      /** @description Bech32 pool ID being delegated to */
      pool_id: string;
      /**
       * @description Type of the reward
       * @enum {string}
       */
      type: "leader" | "member" | "pool_deposit_refund";
    }[];
    /**
     * @example [
     *   {
     *     "active_epoch": 210,
     *     "amount": "12695385",
     *     "pool_id": "pool1pu5jlj4q9w9jlxeu370a3c9myx47md5j5m2str0naunn2q3lkdy"
     *   },
     *   {
     *     "active_epoch": 211,
     *     "amount": "22695385",
     *     "pool_id": "pool1pu5jlj4q9w9jlxeu370a3c9myx47md5j5m2str0naunn2q3lkdy"
     *   }
     * ]
     */
    account_history_content: {
      /**
       * @description Epoch in which the stake was active
       * @example 210
       */
      active_epoch: number;
      /** @description Stake amount in Lovelaces */
      amount: string;
      /** @description Bech32 ID of pool being delegated to */
      pool_id: string;
    }[];
    /**
     * @example [
     *   {
     *     "active_epoch": 210,
     *     "tx_hash": "2dd15e0ef6e6a17841cb9541c27724072ce4d4b79b91e58432fbaa32d9572531",
     *     "amount": "12695385",
     *     "pool_id": "pool1pu5jlj4q9w9jlxeu370a3c9myx47md5j5m2str0naunn2q3lkdy"
     *   },
     *   {
     *     "active_epoch": 242,
     *     "tx_hash": "1a0570af966fb355a7160e4f82d5a80b8681b7955f5d44bec0dde628516157f0",
     *     "amount": "12691385",
     *     "pool_id": "pool1kchver88u3kygsak8wgll7htr8uxn5v35lfrsyy842nkscrzyvj"
     *   }
     * ]
     */
    account_delegation_content: {
      /**
       * @description Epoch in which the delegation becomes active
       * @example 210
       */
      active_epoch: number;
      /** @description Hash of the transaction containing the delegation */
      tx_hash: string;
      /** @description Rewards for given epoch in Lovelaces */
      amount: string;
      /** @description Bech32 ID of pool being delegated to */
      pool_id: string;
    }[];
    /**
     * @example [
     *   {
     *     "tx_hash": "2dd15e0ef6e6a17841cb9541c27724072ce4d4b79b91e58432fbaa32d9572531",
     *     "action": "registered"
     *   },
     *   {
     *     "tx_hash": "1a0570af966fb355a7160e4f82d5a80b8681b7955f5d44bec0dde628516157f0",
     *     "action": "deregistered"
     *   }
     * ]
     */
    account_registration_content: {
      /** @description Hash of the transaction containing the (de)registration certificate */
      tx_hash: string;
      /**
       * @description Action in the certificate
       * @enum {string}
       */
      action: "registered" | "deregistered";
    }[];
    /**
     * @example [
     *   {
     *     "tx_hash": "48a9625c841eea0dd2bb6cf551eabe6523b7290c9ce34be74eedef2dd8f7ecc5",
     *     "amount": "454541212442"
     *   },
     *   {
     *     "tx_hash": "4230b0cbccf6f449f0847d8ad1d634a7a49df60d8c142bb8cc2dbc8ca03d9e34",
     *     "amount": "97846969"
     *   }
     * ]
     */
    account_withdrawal_content: {
      /** @description Hash of the transaction containing the withdrawal */
      tx_hash: string;
      /** @description Withdrawal amount in Lovelaces */
      amount: string;
    }[];
    /**
     * @example [
     *   {
     *     "tx_hash": "69705bba1d687a816ff5a04ec0c358a1f1ef075ab7f9c6cc2763e792581cec6d",
     *     "amount": "2193707473"
     *   },
     *   {
     *     "tx_hash": "baaa77b63d4d7d2bb3ab02c9b85978c2092c336dede7f59e31ad65452d510c13",
     *     "amount": "14520198574"
     *   }
     * ]
     */
    account_mir_content: {
      /** @description Hash of the transaction containing the MIR */
      tx_hash: string;
      /** @description MIR amount in Lovelaces */
      amount: string;
    }[];
    /**
     * @example [
     *   {
     *     "address": "addr1qx2kd28nq8ac5prwg32hhvudlwggpgfp8utlyqxu6wqgz62f79qsdmm5dsknt9ecr5w468r9ey0fxwkdrwh08ly3tu9sy0f4qd"
     *   },
     *   {
     *     "address": "addr1qys3czp8s9thc6u2fqed9yq3h24nyw28uk0m6mkgn9dkckjf79qsdmm5dsknt9ecr5w468r9ey0fxwkdrwh08ly3tu9suth4w4"
     *   },
     *   {
     *     "address": "addr1q8j55h253zcvl326sk5qdt2n8z7eghzspe0ekxgncr796s2f79qsdmm5dsknt9ecr5w468r9ey0fxwkdrwh08ly3tu9sjmd35m"
     *   },
     *   {
     *     "address": "addr1q8f7gxrprank3drhx8k5grlux7ene0nlwun8y9thu8mc3yjf79qsdmm5dsknt9ecr5w468r9ey0fxwkdrwh08ly3tu9sls6vnt"
     *   }
     * ]
     */
    account_addresses_content: {
      /** @description Address associated with the stake key */
      address: string;
    }[];
    /**
     * @example [
     *   {
     *     "unit": "d5e6bf0500378d4f0da4e8dde6becec7621cd8cbf5cbb9b87013d4cc537061636542756433343132",
     *     "quantity": "1"
     *   },
     *   {
     *     "unit": "b0d07d45fe9514f80213f4020e5a61241458be626841cde717cb38a76e7574636f696e",
     *     "quantity": "125"
     *   }
     * ]
     */
    account_addresses_assets: {
      /**
       * Format: Concatenation of asset policy_id and hex-encoded asset_name
       * @description The unit of the value
       */
      unit: string;
      /** @description The quantity of the unit */
      quantity: string;
    }[];
    account_addresses_total: {
      /**
       * @description Bech32 encoded stake address
       * @example stake1u9l5q5jwgelgagzyt6nuaasefgmn8pd25c8e9qpeprq0tdcp0e3uk
       */
      stake_address: string;
      /**
       * @example [
       *   {
       *     "unit": "lovelace",
       *     "quantity": "42000000"
       *   },
       *   {
       *     "unit": "b0d07d45fe9514f80213f4020e5a61241458be626841cde717cb38a76e7574636f696e",
       *     "quantity": "12"
       *   }
       * ]
       */
      received_sum: {
        /**
         * Format: Lovelace or concatenation of asset policy_id and hex-encoded asset_name
         * @description The unit of the value
         */
        unit: string;
        /** @description The quantity of the unit */
        quantity: string;
      }[];
      /**
       * @example [
       *   {
       *     "unit": "lovelace",
       *     "quantity": "42000000"
       *   },
       *   {
       *     "unit": "b0d07d45fe9514f80213f4020e5a61241458be626841cde717cb38a76e7574636f696e",
       *     "quantity": "12"
       *   }
       * ]
       */
      sent_sum: {
        /**
         * Format: Lovelace or concatenation of asset policy_id and hex-encoded asset_name
         * @description The unit of the value
         */
        unit: string;
        /** @description The quantity of the unit */
        quantity: string;
      }[];
      /**
       * @description Count of all transactions for all addresses associated with the account
       * @example 12
       */
      tx_count: number;
    };
    /**
     * @example [
     *   {
     *     "label": "1990",
     *     "cip10": null,
     *     "count": "1"
     *   },
     *   {
     *     "label": "1967",
     *     "cip10": "nut.link metadata oracles registry",
     *     "count": "3"
     *   },
     *   {
     *     "label": "1968",
     *     "cip10": "nut.link metadata oracles data points",
     *     "count": "16321"
     *   }
     * ]
     */
    tx_metadata_labels: {
      /** @description Metadata label */
      label: string;
      /** @description CIP10 defined description */
      cip10: string | null;
      /** @description The count of metadata entries with a specific label */
      count: string;
    }[];
    /**
     * @example [
     *   {
     *     "tx_hash": "257d75c8ddb0434e9b63e29ebb6241add2b835a307aa33aedba2effe09ed4ec8",
     *     "json_metadata": {
     *       "ADAUSD": [
     *         {
     *           "value": "0.10409800535729975",
     *           "source": "ergoOracles"
     *         }
     *       ]
     *     }
     *   },
     *   {
     *     "tx_hash": "e865f2cc01ca7381cf98dcdc4de07a5e8674b8ea16e6a18e3ed60c186fde2b9c",
     *     "json_metadata": {
     *       "ADAUSD": [
     *         {
     *           "value": "0.15409850555139935",
     *           "source": "ergoOracles"
     *         }
     *       ]
     *     }
     *   },
     *   {
     *     "tx_hash": "4237501da3cfdd53ade91e8911e764bd0699d88fd43b12f44a1f459b89bc91be",
     *     "json_metadata": null
     *   }
     * ]
     */
    tx_metadata_label_json: {
      /** @description Transaction hash that contains the specific metadata */
      tx_hash: string;
      /** @description Content of the JSON metadata */
      json_metadata:
        | (Partial<string> &
            Partial<{ [key: string]: unknown }> &
            Partial<unknown[]> &
            Partial<number> &
            Partial<number> &
            Partial<boolean>)
        | null;
    }[];
    /**
     * @example [
     *   {
     *     "tx_hash": "257d75c8ddb0434e9b63e29ebb6241add2b835a307aa33aedba2effe09ed4ec8",
     *     "cbor_metadata": null,
     *     "metadata": null
     *   },
     *   {
     *     "tx_hash": "e865f2cc01ca7381cf98dcdc4de07a5e8674b8ea16e6a18e3ed60c186fde2b9c",
     *     "cbor_metadata": null,
     *     "metadata": null
     *   },
     *   {
     *     "tx_hash": "4237501da3cfdd53ade91e8911e764bd0699d88fd43b12f44a1f459b89bc91be",
     *     "cbor_metadata": "\\xa100a16b436f6d62696e6174696f6e8601010101010c",
     *     "metadata": "a100a16b436f6d62696e6174696f6e8601010101010c"
     *   }
     * ]
     */
    tx_metadata_label_cbor: {
      /** @description Transaction hash that contains the specific metadata */
      tx_hash: string;
      /**
       * @deprecated
       * @description Content of the CBOR metadata
       */
      cbor_metadata: string | null;
      /** @description Content of the CBOR metadata in hex */
      metadata: string | null;
    }[];
    address_content: {
      /**
       * @description Bech32 encoded addresses
       * @example addr1qxqs59lphg8g6qndelq8xwqn60ag3aeyfcp33c2kdp46a09re5df3pzwwmyq946axfcejy5n4x0y99wqpgtp2gd0k09qsgy6pz
       */
      address: string;
      /**
       * @example [
       *   {
       *     "unit": "lovelace",
       *     "quantity": "42000000"
       *   },
       *   {
       *     "unit": "b0d07d45fe9514f80213f4020e5a61241458be626841cde717cb38a76e7574636f696e",
       *     "quantity": "12"
       *   }
       * ]
       */
      amount: {
        /**
         * Format: Lovelace or concatenation of asset policy_id and hex-encoded asset_name
         * @description The unit of the value
         */
        unit: string;
        /** @description The quantity of the unit */
        quantity: string;
      }[];
      /**
       * @description Stake address that controls the key
       * @example stake1ux3g2c9dx2nhhehyrezyxpkstartcqmu9hk63qgfkccw5rqttygt7
       */
      stake_address: string | null;
      /**
       * @description Address era
       * @example shelley
       * @enum {string}
       */
      type: "byron" | "shelley";
      /**
       * @description True if this is a script address
       * @example false
       */
      script: boolean;
    };
    address_content_extended: {
      /**
       * @description Bech32 encoded addresses
       * @example addr1qxqs59lphg8g6qndelq8xwqn60ag3aeyfcp33c2kdp46a09re5df3pzwwmyq946axfcejy5n4x0y99wqpgtp2gd0k09qsgy6pz
       */
      address: string;
      /**
       * @example [
       *   {
       *     "unit": "lovelace",
       *     "quantity": "42000000",
       *     "decimals": 6,
       *     "has_nft_onchain_metadata": false
       *   },
       *   {
       *     "unit": "b0d07d45fe9514f80213f4020e5a61241458be626841cde717cb38a76e7574636f696e",
       *     "quantity": "12",
       *     "decimals": null,
       *     "has_nft_onchain_metadata": true
       *   }
       * ]
       */
      amount: {
        /**
         * Format: Lovelace or concatenation of asset policy_id and hex-encoded asset_name
         * @description The unit of the value
         */
        unit: string;
        /** @description The quantity of the unit */
        quantity: string;
        /** @description Number of decimal places of the asset unit */
        decimals: number | null;
        /** @description The latest minting transaction includes the NFT metadata according to CIP25 */
        has_nft_onchain_metadata: boolean;
      }[];
      /**
       * @description Stake address that controls the key
       * @example stake1ux3g2c9dx2nhhehyrezyxpkstartcqmu9hk63qgfkccw5rqttygt7
       */
      stake_address: string | null;
      /**
       * @description Address era
       * @example shelley
       * @enum {string}
       */
      type: "byron" | "shelley";
      /**
       * @description True if this is a script address
       * @example false
       */
      script: boolean;
    };
    address_content_total: {
      /**
       * @description Bech32 encoded address
       * @example addr1qxqs59lphg8g6qndelq8xwqn60ag3aeyfcp33c2kdp46a09re5df3pzwwmyq946axfcejy5n4x0y99wqpgtp2gd0k09qsgy6pz
       */
      address: string;
      /**
       * @example [
       *   {
       *     "unit": "lovelace",
       *     "quantity": "42000000"
       *   },
       *   {
       *     "unit": "b0d07d45fe9514f80213f4020e5a61241458be626841cde717cb38a76e7574636f696e",
       *     "quantity": "12"
       *   }
       * ]
       */
      received_sum: {
        /**
         * Format: Lovelace or concatenation of asset policy_id and hex-encoded asset_name
         * @description The unit of the value
         */
        unit: string;
        /** @description The quantity of the unit */
        quantity: string;
      }[];
      /**
       * @example [
       *   {
       *     "unit": "lovelace",
       *     "quantity": "42000000"
       *   },
       *   {
       *     "unit": "b0d07d45fe9514f80213f4020e5a61241458be626841cde717cb38a76e7574636f696e",
       *     "quantity": "12"
       *   }
       * ]
       */
      sent_sum: {
        /**
         * Format: Lovelace or concatenation of asset policy_id and hex-encoded asset_name
         * @description The unit of the value
         */
        unit: string;
        /** @description The quantity of the unit */
        quantity: string;
      }[];
      /**
       * @description Count of all transactions on the address
       * @example 12
       */
      tx_count: number;
    };
    /**
     * @example [
     *   {
     *     "tx_hash": "39a7a284c2a0948189dc45dec670211cd4d72f7b66c5726c08d9b3df11e44d58",
     *     "output_index": 0,
     *     "amount": [
     *       {
     *         "unit": "lovelace",
     *         "quantity": "42000000"
     *       }
     *     ],
     *     "block": "7eb8e27d18686c7db9a18f8bbcfe34e3fed6e047afaa2d969904d15e934847e6",
     *     "data_hash": "9e478573ab81ea7a8e31891ce0648b81229f408d596a3483e6f4f9b92d3cf710"
     *   },
     *   {
     *     "tx_hash": "4c4e67bafa15e742c13c592b65c8f74c769cd7d9af04c848099672d1ba391b49",
     *     "output_index": 0,
     *     "amount": [
     *       {
     *         "unit": "lovelace",
     *         "quantity": "729235000"
     *       }
     *     ],
     *     "block": "953f1b80eb7c11a7ffcd67cbd4fde66e824a451aca5a4065725e5174b81685b7",
     *     "data_hash": null
     *   },
     *   {
     *     "tx_hash": "768c63e27a1c816a83dc7b07e78af673b2400de8849ea7e7b734ae1333d100d2",
     *     "output_index": 1,
     *     "amount": [
     *       {
     *         "unit": "lovelace",
     *         "quantity": "42000000"
     *       },
     *       {
     *         "unit": "b0d07d45fe9514f80213f4020e5a61241458be626841cde717cb38a76e7574636f696e",
     *         "quantity": "12"
     *       }
     *     ],
     *     "block": "5c571f83fe6c784d3fbc223792627ccf0eea96773100f9aedecf8b1eda4544d7",
     *     "data_hash": null
     *   }
     * ]
     */
    address_utxo_content: {
      /** @description Transaction hash of the UTXO */
      tx_hash: string;
      /**
       * @deprecated
       * @description UTXO index in the transaction
       */
      tx_index: number;
      /** @description UTXO index in the transaction */
      output_index: number;
      amount: {
        /**
         * Format: Lovelace or concatenation of asset policy_id and hex-encoded asset_name
         * @description The unit of the value
         */
        unit: string;
        /** @description The quantity of the unit */
        quantity: string;
      }[];
      /** @description Block hash of the UTXO */
      block: string;
      /** @description The hash of the transaction output datum */
      data_hash: string | null;
      /**
       * @description CBOR encoded inline datum
       * @example 19a6aa
       */
      inline_datum: string | null;
      /**
       * @description The hash of the reference script of the output
       * @example 13a3efd825703a352a8f71f4e2758d08c28c564e8dfcce9f77776ad1
       */
      reference_script_hash: string | null;
    }[];
    /**
     * @example [
     *   "2dd15e0ef6e6a17841cb9541c27724072ce4d4b79b91e58432fbaa32d9572531",
     *   "1a0570af966fb355a7160e4f82d5a80b8681b7955f5d44bec0dde628516157f0"
     * ]
     */
    address_txs_content: string[];
    /**
     * @example [
     *   {
     *     "tx_hash": "8788591983aa73981fc92d6cddbbe643959f5a784e84b8bee0db15823f575a5b",
     *     "tx_index": 6,
     *     "block_height": 69,
     *     "block_time": 1635505891
     *   },
     *   {
     *     "tx_hash": "52e748c4dec58b687b90b0b40d383b9fe1f24c1a833b7395cdf07dd67859f46f",
     *     "tx_index": 9,
     *     "block_height": 4547,
     *     "block_time": 1635505987
     *   },
     *   {
     *     "tx_hash": "e8073fd5318ff43eca18a852527166aa8008bee9ee9e891f585612b7e4ba700b",
     *     "tx_index": 0,
     *     "block_height": 564654,
     *     "block_time": 1834505492
     *   }
     * ]
     */
    address_transactions_content: {
      /** @description Hash of the transaction */
      tx_hash: string;
      /** @description Transaction index within the block */
      tx_index: number;
      /** @description Block height */
      block_height: number;
      /** @description Block creation time in UNIX time */
      block_time: number;
    }[];
    /**
     * @example [
     *   "pool1pu5jlj4q9w9jlxeu370a3c9myx47md5j5m2str0naunn2q3lkdy",
     *   "pool1hn7hlwrschqykupwwrtdfkvt2u4uaxvsgxyh6z63703p2knj288",
     *   "pool1ztjyjfsh432eqetadf82uwuxklh28xc85zcphpwq6mmezavzad2"
     * ]
     */
    pool_list: string[];
    /**
     * @example [
     *   {
     *     "pool_id": "pool19u64770wqp6s95gkajc8udheske5e6ljmpq33awxk326zjaza0q",
     *     "active_stake": "1541200000",
     *     "live_stake": "1541400000"
     *   },
     *   {
     *     "pool_id": "pool1dvla4zq98hpvacv20snndupjrqhuc79zl6gjap565nku6et5zdx",
     *     "active_stake": "22200000",
     *     "live_stake": "48955550"
     *   },
     *   {
     *     "pool_id": "pool1wvccajt4eugjtf3k0ja3exjqdj7t8egsujwhcw4tzj4rzsxzw5w",
     *     "active_stake": "9989541215",
     *     "live_stake": "168445464878"
     *   }
     * ]
     */
    pool_list_extended: {
      /**
       * @description Bech32 encoded pool ID
       * @example pool1z5uqdk7dzdxaae5633fqfcu2eqzy3a3rgtuvy087fdld7yws0xt
       */
      pool_id: string;
      /**
       * @description Hexadecimal pool ID.
       * @example 0f292fcaa02b8b2f9b3c8f9fd8e0bb21abedb692a6d5058df3ef2735
       */
      hex: string;
      /**
       * @description Active delegated amount
       * @example 4200000000
       */
      active_stake: string;
      /**
       * @description Currently delegated amount
       * @example 6900000000
       */
      live_stake: string;
    }[];
    /**
     * @example [
     *   {
     *     "pool_id": "pool19u64770wqp6s95gkajc8udheske5e6ljmpq33awxk326zjaza0q",
     *     "epoch": 225
     *   },
     *   {
     *     "pool_id": "pool1dvla4zq98hpvacv20snndupjrqhuc79zl6gjap565nku6et5zdx",
     *     "epoch": 215
     *   },
     *   {
     *     "pool_id": "pool1wvccajt4eugjtf3k0ja3exjqdj7t8egsujwhcw4tzj4rzsxzw5w",
     *     "epoch": 231
     *   }
     * ]
     */
    pool_list_retire: {
      /**
       * @description Bech32 encoded pool ID
       * @example pool1z5uqdk7dzdxaae5633fqfcu2eqzy3a3rgtuvy087fdld7yws0xt
       */
      pool_id: string;
      /**
       * @description Retirement epoch number
       * @example 242
       */
      epoch: number;
    }[];
    pool: {
      /**
       * @description Bech32 pool ID
       * @example pool1pu5jlj4q9w9jlxeu370a3c9myx47md5j5m2str0naunn2q3lkdy
       */
      pool_id: string;
      /**
       * @description Hexadecimal pool ID.
       * @example 0f292fcaa02b8b2f9b3c8f9fd8e0bb21abedb692a6d5058df3ef2735
       */
      hex: string;
      /**
       * @description VRF key hash
       * @example 0b5245f9934ec2151116fb8ec00f35fd00e0aa3b075c4ed12cce440f999d8233
       */
      vrf_key: string;
      /**
       * @description Total minted blocks
       * @example 69
       */
      blocks_minted: number;
      /**
       * @description Number of blocks minted in the current epoch
       * @example 4
       */
      blocks_epoch: number;
      /** @example 6900000000 */
      live_stake: string;
      /** @example 0.42 */
      live_size: number;
      /** @example 0.93 */
      live_saturation: number;
      /** @example 127 */
      live_delegators: number;
      /** @example 4200000000 */
      active_stake: string;
      /** @example 0.43 */
      active_size: number;
      /**
       * @description Stake pool certificate pledge
       * @example 5000000000
       */
      declared_pledge: string;
      /**
       * @description Stake pool current pledge
       * @example 5000000001
       */
      live_pledge: string;
      /**
       * @description Margin tax cost of the stake pool
       * @example 0.05
       */
      margin_cost: number;
      /**
       * @description Fixed tax cost of the stake pool
       * @example 340000000
       */
      fixed_cost: string;
      /**
       * @description Bech32 reward account of the stake pool
       * @example stake1uxkptsa4lkr55jleztw43t37vgdn88l6ghclfwuxld2eykgpgvg3f
       */
      reward_account: string;
      /**
       * @example [
       *   "stake1u98nnlkvkk23vtvf9273uq7cph5ww6u2yq2389psuqet90sv4xv9v"
       * ]
       */
      owners: string[];
      /**
       * @example [
       *   "9f83e5484f543e05b52e99988272a31da373f3aab4c064c76db96643a355d9dc",
       *   "7ce3b8c433bf401a190d58c8c483d8e3564dfd29ae8633c8b1b3e6c814403e95",
       *   "3e6e1200ce92977c3fe5996bd4d7d7e192bcb7e231bc762f9f240c76766535b9"
       * ]
       */
      registration: string[];
      retirement: string[];
    };
    pool_history: {
      /**
       * @description Epoch number
       * @example 233
       */
      epoch: number;
      /**
       * @description Number of blocks created by pool
       * @example 22
       */
      blocks: number;
      /**
       * @description Active (Snapshot of live stake 2 epochs ago) stake in Lovelaces
       * @example 20485965693569
       */
      active_stake: string;
      /**
       * @description Pool size (percentage) of overall active stake at that epoch
       * @example 1.2345
       */
      active_size: number;
      /**
       * @description Number of delegators for epoch
       * @example 115
       */
      delegators_count: number;
      /**
       * @description Total rewards received before distribution to delegators
       * @example 206936253674159
       */
      rewards: string;
      /**
       * @description Pool operator rewards
       * @example 1290968354
       */
      fees: string;
    }[];
    pool_metadata: {
      /**
       * @description Bech32 pool ID
       * @example pool1pu5jlj4q9w9jlxeu370a3c9myx47md5j5m2str0naunn2q3lkdy
       */
      pool_id: string;
      /**
       * @description Hexadecimal pool ID
       * @example 0f292fcaa02b8b2f9b3c8f9fd8e0bb21abedb692a6d5058df3ef2735
       */
      hex: string;
      /**
       * @description URL to the stake pool metadata
       * @example https://stakenuts.com/mainnet.json
       */
      url: string | null;
      /**
       * @description Hash of the metadata file
       * @example 47c0c68cb57f4a5b4a87bad896fc274678e7aea98e200fa14a1cb40c0cab1d8c
       */
      hash: string | null;
      /**
       * @description Ticker of the stake pool
       * @example NUTS
       */
      ticker: string | null;
      /**
       * @description Name of the stake pool
       * @example Stake Nuts
       */
      name: string | null;
      /**
       * @description Description of the stake pool
       * @example The best pool ever
       */
      description: string | null;
      /**
       * @description Home page of the stake pool
       * @example https://stakentus.com/
       */
      homepage: string | null;
    };
    empty_object: { [key: string]: unknown };
    pool_relays: {
      /**
       * @description IPv4 address of the relay
       * @example 4.4.4.4
       */
      ipv4: string | null;
      /**
       * @description IPv6 address of the relay
       * @example https://stakenuts.com/mainnet.json
       */
      ipv6: string | null;
      /**
       * @description DNS name of the relay
       * @example relay1.stakenuts.com
       */
      dns: string | null;
      /**
       * @description DNS SRV entry of the relay
       * @example _relays._tcp.relays.stakenuts.com
       */
      dns_srv: string | null;
      /**
       * @description Network port of the relay
       * @example 3001
       */
      port: number;
    }[];
    /**
     * @example [
     *   {
     *     "address": "stake1ux4vspfvwuus9uwyp5p3f0ky7a30jq5j80jxse0fr7pa56sgn8kha",
     *     "live_stake": "1137959159981411"
     *   },
     *   {
     *     "address": "stake1uylayej7esmarzd4mk4aru37zh9yz0luj3g9fsvgpfaxulq564r5u",
     *     "live_stake": "16958865648"
     *   },
     *   {
     *     "address": "stake1u8lr2pnrgf8f7vrs9lt79hc3sxm8s2w4rwvgpncks3axx6q93d4ck",
     *     "live_stake": "18605647"
     *   }
     * ]
     */
    pool_delegators: {
      /** @description Bech32 encoded stake addresses */
      address: string;
      /** @description Currently delegated amount */
      live_stake: string;
    }[];
    /**
     * @example [
     *   "d8982ca42cfe76b747cc681d35d671050a9e41e9cfe26573eb214e94fe6ff21d",
     *   "026436c539e2ce84c7f77ffe669f4e4bbbb3b9c53512e5857dcba8bb0b4e9a8c",
     *   "bcc8487f419b8c668a18ea2120822a05df6dfe1de1f0fac3feba88cf760f303c",
     *   "86bf7b4a274e0f8ec9816171667c1b4a0cfc661dc21563f271acea9482b62df7"
     * ]
     */
    pool_blocks: string[];
    /**
     * @example [
     *   {
     *     "tx_hash": "6804edf9712d2b619edb6ac86861fe93a730693183a262b165fcc1ba1bc99cad",
     *     "cert_index": 0,
     *     "action": "registered"
     *   },
     *   {
     *     "tx_hash": "9c190bc1ac88b2ab0c05a82d7de8b71b67a9316377e865748a89d4426c0d3005",
     *     "cert_index": 0,
     *     "action": "deregistered"
     *   },
     *   {
     *     "tx_hash": "e14a75b0eb2625de7055f1f580d70426311b78e0d36dd695a6bdc96c7b3d80e0",
     *     "cert_index": 1,
     *     "action": "registered"
     *   }
     * ]
     */
    pool_updates: {
      /** @description Transaction ID */
      tx_hash: string;
      /** @description Certificate within the transaction */
      cert_index: number;
      /**
       * @description Action in the certificate
       * @enum {string}
       */
      action: "registered" | "deregistered";
    }[];
    /**
     * @example [
     *   {
     *     "asset": "b0d07d45fe9514f80213f4020e5a61241458be626841cde717cb38a76e7574636f696e",
     *     "quantity": "1"
     *   },
     *   {
     *     "asset": "b0d07d45fe9514f80213f4020e5a61241458be626841cde717cb38a76e75d",
     *     "quantity": "100000"
     *   },
     *   {
     *     "asset": "6804edf9712d2b619edb6ac86861fe93a730693183a262b165fcc1ba1bc99cad",
     *     "quantity": "18605647"
     *   }
     * ]
     */
    assets: {
      /**
       * Format: Concatenation of the policy_id and hex-encoded asset_name
       * @description Asset identifier
       */
      asset: string;
      /** @description Current asset quantity */
      quantity: string;
    }[];
    asset: {
      /**
       * @description Hex-encoded asset full name
       * @example b0d07d45fe9514f80213f4020e5a61241458be626841cde717cb38a76e7574636f696e
       */
      asset: string;
      /**
       * @description Policy ID of the asset
       * @example b0d07d45fe9514f80213f4020e5a61241458be626841cde717cb38a7
       */
      policy_id: string;
      /**
       * @description Hex-encoded asset name of the asset
       * @example 6e7574636f696e
       */
      asset_name: string | null;
      /**
       * @description CIP14 based user-facing fingerprint
       * @example asset1pkpwyknlvul7az0xx8czhl60pyel45rpje4z8w
       */
      fingerprint: string;
      /**
       * @description Current asset quantity
       * @example 12000
       */
      quantity: string;
      /**
       * @description ID of the initial minting transaction
       * @example 6804edf9712d2b619edb6ac86861fe93a730693183a262b165fcc1ba1bc99cad
       */
      initial_mint_tx_hash: string;
      /**
       * @description Count of mint and burn transactions
       * @example 1
       */
      mint_or_burn_count: number;
      /**
       * @description On-chain metadata stored in the minting transaction under label 721,
       * community discussion around the standard ongoing at https://github.com/cardano-foundation/CIPs/pull/85
       */
      onchain_metadata:
        | ({
            /**
             * @description Name of the asset
             * @example My NFT token
             */
            name?: string;
            /**
             * @description URI(s) of the associated asset
             * @example ipfs://ipfs/QmfKyJ4tuvHowwKQCbCHj4L5T3fSj8cjs7Aau8V7BWv226
             */
            image?: string | string[];
          } & { [key: string]: unknown })
        | null;
      metadata: {
        /**
         * @description Asset name
         * @example nutcoin
         */
        name: string;
        /**
         * @description Asset description
         * @example The Nut Coin
         */
        description: string;
        /** @example nutc */
        ticker: string | null;
        /**
         * @description Asset website
         * @example https://www.stakenuts.com/
         */
        url: string | null;
        /**
         * @description Base64 encoded logo of the asset
         * @example iVBORw0KGgoAAAANSUhEUgAAADAAAAAoCAYAAAC4h3lxAAAABGdBTUEAALGPC/xhBQAAACBjSFJNAAB6JgAAgIQAAPoAAACA6AAAdTAAAOpgAAA6mAAAF3CculE8AAAABmJLR0QA/wD/AP+gvaeTAAAAB3RJTUUH5QITCDUPjqwFHwAAB9xJREFUWMPVWXtsU9cZ/8499/r6dZ3E9rUdO7ZDEgglFWO8KaOsJW0pCLRKrN1AqqYVkqoqrYo0ja7bpElru1WairStFKY9WzaE1E1tx+jokKqwtqFNyhKahEJJyJNgJ37E9r1+3HvO/sFR4vhx7SBtfH/F3/l93/f7ne/4PBxEKYU72dj/ZfH772v1TU+HtqbTaX8wOO01GPQpRVH7JEm+vGHDuq6z7/8jUSoHKtaBKkEUFUXdajDy1hUrmrs6zn/wWS7m7pZVjMUirKGUTnzc+e9xLcTrPPVfZzDz06Sc2lyQGEIyAPzT7Xa+dvE/3e+XLaCxoflHsVj8MAAYs74aa/WHoenwvpkZKeFy2Z5NJlOPUkqXZccFwSSrKjlyffjLH+TL6XTUGTGL/6hklD3ldIrj2M5MRmkLBMcvaRLQ1Nj88sxM/HCBfMP+eu/OYGDqe6l0WmpoqJ/88upgrU7HrQNA/cFg6MlkKiLlBtVUO40cx54BgHvLIT/HJLvdeqh/4NKxogKWN7fsCoUi7xTLxLJ4vLq6ak//wKVOrdXtttrTDMPsqJA8AAAwDErdu3VL3alTf5ma9eWCpoKhn5dKpCiqJxicPucQPVu0FHaInn35yHMcKwPAa4SQ3QCwFgDWUko3qSr5vqqSgTypuEg4Mo/zvA74/Y0rZSnZU8akSHV17k2fXfy0txjI5224kEym1s/1EUI7LBbztweHrkzkizn49LP6U6feepFSeggAQK/n04SQZ8bGrxdeQjZrbRvGzLH5hcibRqOhPplMfS1fIY5jz4xPDBdcGggho2h3z9sOLRazdG3wqp9SMgUlzGZ17SSEPsRx7J8CwfGu3PF57WhqqjfN/VxVJUxKUrIdITAXKpDJKFscosdfaFy0u+/K9aXTmXe0kAcAmA5Nng5Hbj6Tj/wCAYFAcN7uEY3GXGazMSHLqVVFapgBoMPna9yqhRAAgCTJMa3YUjZPgNFkSlWYx5eUkx+0tKx83V3rF+cVYJjruWCe133DIXqMmrNrFSDabRcWkywYmG5XFOW6aHcfb9324CoAgMmbo9MIoXkneCajiAihV/c/8eSiBSw4BxyiZxQA6m7H7FBKT2CMn2MY5jFFUX6ZO+5w2j8aHZ7YH40FByrJD5DnHGAY5uTtIA8AgBDaR4F2Yxb3WizCgmtA4ObUPSazodduqz3Suu0hf0U1cjvgdNSJ1dWWveFwdDUAtAiC2Uopdcdi8c9Zlh3GmDGl05mtAKAvo47EcdwThJCjqqpWFxALlNITomg73tff21GRAJez7iVK4WGGYfoJIQduBsbm7UrLm1ueCoUiv65kpiilw1ZbzcFoZOYoIcRTAn6eYZgXJm+Oni+Vd3YJbdyweSch9HlK6SpVVfcyDDq7Yf3m2XPBIXraKyV/a4b9UkLawbLsZgB4rwR8CyGkw13r+5fX27BckwBAEJ47oKpk8+DgUIdod7fV1vqOAMDrlZLPmqKoB+rrvXIgOP6w0WjYy3Ls5RL4bUk52bVm9fqnCk7M3CXU2ND8+MxM7BcIIftiyRYyntcdHh0bmr0wfmXl6p2SJB2KRmP3l4j7zejYUFtRAQAAgslm1Bv4nyGEDpYiIwjmjw0G/RjP866JiclNqqqWfKLq9fyZkdHBBXcnl9O71GDgD8bj0ncRQqZ8sRgzL9yYHH2pqICsOUTPLgA4CXNeZFmzWIS/YhYfjUZmvqPjuceSckrz25pS2h2cmlhbaBwhzr6kfsnL8Xhif55YYFl23Y3Jkdl7EVMoUSA4/q6qqNsBIPd11e52u45FwtG3CSH7yiEPAGC1Vt9dXGBmanDoygFLlbAjtzZCCMyC6VeaOpA1l9N7l1kwtauKaozHE28YTQaQpeR7+TqjxXheR0fHhhgt2CX1S3clEtKC16HL5djYe+niBU0CcmYA2W21/Qih5ZqDcoxlMZ24MaJJAABA87IVJ8Lh6N65Pr1B/+LIyLUfAhRZQvnM6ah7ZDHkAQB0vK6/HHxNTc2ruT5Zkldn/y5LACFk+2LIAwAwCGl6yGSt88KHXbmrBCHkqEgAz+vWLFZALJb4qNwYhFDhCSknkSwnQ4sVgDFeWg7+gQe2r1tAmkGTFQlACHWVg89nhJA9ot3dphV/eeCLp/Pw6K5IQP0S39uLFXCLwDG7zf1cKZxD9LSlUunHc/12u/2t2Vzl/rzu8zb8PZlM7bwdQgDgPK/nX2nddt+53//ht3LW2dS0fF0iLj2vquojuQFmwXRucPBKa8UCmpe1iOFwpAsAfLdJBFBKwVIlXJ2JxqKCxbwyHkvoCkAlv9/71U+7Oq+UJWDZ0hViJBL1cRynbNq0sSeeiPl6ei4NqIqq6TSmlB7X6bjuTEY5pgWfzwxGPZhMpt39/b3vzvWXFGCzulZjjM/DrauDwcAr8bjcgzGjZUuVBMH8k2uDX7wCAFDr8n2LEPI7SqmhTP6SzVbz6MDlz0/nDpT8EmOM22HOvUeWU2wp8iyLgRL6hk7Hrc2SBwC4MTlykmXZRozxn00mbVcphNA5jJmV+chr6oDd5l6jN/A/TqfSuwEAGITGMIsvGo3GTwTB3Dc2NjGSxdZYq4VIOOoNBANnKE0XPXE3brjHOTQ08k2MmVZOxzVJCbkFIQSCYEphzPaFQuGzTpfjb319PZ8UFXin/5OvrHPg/9HueAH/BSUqOuNZm4fyAAAAJXRFWHRkYXRlOmNyZWF0ZQAyMDIxLTAyLTE5VDA4OjUyOjI1KzAwOjAwCmFGlgAAACV0RVh0ZGF0ZTptb2RpZnkAMjAyMS0wMi0xOVQwODo1MjoyMyswMDowMBjsyxAAAAAASUVORK5CYII=
         */
        logo: string | null;
        /**
         * @description Number of decimal places of the asset unit
         * @example 6
         */
        decimals: number | null;
      } | null;
    };
    /**
     * @example [
     *   {
     *     "tx_hash": "2dd15e0ef6e6a17841cb9541c27724072ce4d4b79b91e58432fbaa32d9572531",
     *     "amount": "10",
     *     "action": "minted"
     *   },
     *   {
     *     "tx_hash": "9c190bc1ac88b2ab0c05a82d7de8b71b67a9316377e865748a89d4426c0d3005",
     *     "amount": "5",
     *     "action": "burned"
     *   },
     *   {
     *     "tx_hash": "1a0570af966fb355a7160e4f82d5a80b8681b7955f5d44bec0dde628516157f0",
     *     "amount": "5",
     *     "action": "burned"
     *   }
     * ]
     */
    asset_history: {
      /** @description Hash of the transaction containing the asset action */
      tx_hash: string;
      /**
       * @description Action executed upon the asset policy
       * @enum {string}
       */
      action: "minted" | "burned";
      /** @description Asset amount of the specific action */
      amount: string;
    }[];
    /**
     * @example [
     *   "8788591983aa73981fc92d6cddbbe643959f5a784e84b8bee0db15823f575a5b",
     *   "52e748c4dec58b687b90b0b40d383b9fe1f24c1a833b7395cdf07dd67859f46f",
     *   "e8073fd5318ff43eca18a852527166aa8008bee9ee9e891f585612b7e4ba700b"
     * ]
     */
    asset_txs: string[];
    /**
     * @example [
     *   {
     *     "tx_hash": "8788591983aa73981fc92d6cddbbe643959f5a784e84b8bee0db15823f575a5b",
     *     "tx_index": 6,
     *     "block_height": 69,
     *     "block_time": 1635505891
     *   },
     *   {
     *     "tx_hash": "52e748c4dec58b687b90b0b40d383b9fe1f24c1a833b7395cdf07dd67859f46f",
     *     "tx_index": 9,
     *     "block_height": 4547,
     *     "block_time": 1635505987
     *   },
     *   {
     *     "tx_hash": "e8073fd5318ff43eca18a852527166aa8008bee9ee9e891f585612b7e4ba700b",
     *     "tx_index": 0,
     *     "block_height": 564654,
     *     "block_time": 1834505492
     *   }
     * ]
     */
    asset_transactions: ({
      /** @description Hash of the transaction */
      tx_hash: string;
      /** @description Transaction index within the block */
      tx_index: number;
      /** @description Block height */
      block_height: number;
    } & {
      block_time: unknown;
    })[];
    /**
     * @example [
     *   {
     *     "address": "addr1qxqs59lphg8g6qndelq8xwqn60ag3aeyfcp33c2kdp46a09re5df3pzwwmyq946axfcejy5n4x0y99wqpgtp2gd0k09qsgy6pz",
     *     "quantity": "1"
     *   },
     *   {
     *     "address": "addr1qyhr4exrgavdcn3qhfcc9f939fzsch2re5ry9cwvcdyh4x4re5df3pzwwmyq946axfcejy5n4x0y99wqpgtp2gd0k09qdpvhza",
     *     "quantity": "100000"
     *   },
     *   {
     *     "address": "addr1q8zup8m9ue3p98kxlxl9q8rnyan8hw3ul282tsl9s326dfj088lvedv4zckcj24arcpasr0gua4c5gq4zw2rpcpjk2lq8cmd9l",
     *     "quantity": "18605647"
     *   }
     * ]
     */
    asset_addresses: {
      /** @description Address containing the specific asset */
      address: string;
      /** @description Asset quantity on the specific address */
      quantity: string;
    }[];
    /**
     * @example [
     *   {
     *     "asset": "b0d07d45fe9514f80213f4020e5a61241458be626841cde717cb38a76e7574636f696e",
     *     "quantity": "1"
     *   },
     *   {
     *     "asset": "b0d07d45fe9514f80213f4020e5a61241458be626841cde717cb38a766e",
     *     "quantity": "100000"
     *   },
     *   {
     *     "asset": "b0d07d45fe9514f80213f4020e5a61241458be626841cde717cb574636f696e",
     *     "quantity": "18605647"
     *   }
     * ]
     */
    asset_policy: {
      /** @description Concatenation of the policy_id and hex-encoded asset_name */
      asset: string;
      /** @description Current asset quantity */
      quantity: string;
    }[];
    /**
     * @example [
     *   {
     *     "script_hash": "13a3efd825703a352a8f71f4e2758d08c28c564e8dfcce9f77776ad1"
     *   },
     *   {
     *     "script_hash": "e1457a0c47dfb7a2f6b8fbb059bdceab163c05d34f195b87b9f2b30e"
     *   },
     *   {
     *     "script_hash": "a6e63c0ff05c96943d1cc30bf53112ffff0f34b45986021ca058ec54"
     *   }
     * ]
     */
    scripts: {
      /** @description Script hash */
      script_hash: string;
    }[];
    script: {
      /**
       * @description Script hash
       * @example 13a3efd825703a352a8f71f4e2758d08c28c564e8dfcce9f77776ad1
       */
      script_hash: string;
      /**
       * @description Type of the script language
       * @example plutusV1
       * @enum {string}
       */
      type: "timelock" | "plutusV1" | "plutusV2";
      /**
       * @description The size of the CBOR serialised script, if a Plutus script
       * @example 3119
       */
      serialised_size: number | null;
    };
    /**
     * @example {
     *   "json": {
     *     "type": "atLeast",
     *     "scripts": [
     *       {
     *         "type": "sig",
     *         "keyHash": "654891a4db2ea44b5263f4079a33efa0358ba90769e3d8f86a4a0f81"
     *       },
     *       {
     *         "type": "sig",
     *         "keyHash": "8685ad48f9bebb8fdb6447abbe140645e0bf743ff98da62e63e2147f"
     *       },
     *       {
     *         "type": "sig",
     *         "keyHash": "cb0f3b3f91693374ff7ce1d473cf6e721c7bab52b0737f04164e5a2d"
     *       }
     *     ],
     *     "required": 2
     *   }
     * }
     */
    script_json: {
      /** @description JSON contents of the `timelock` script, null for `plutus` scripts */
      json:
        | (Partial<string> &
            Partial<{ [key: string]: unknown }> &
            Partial<unknown[]> &
            Partial<number> &
            Partial<number> &
            Partial<boolean>)
        | null;
    };
    /**
     * @example {
     *   "cbor": "4e4d01000033222220051200120011"
     * }
     */
    script_cbor: {
      /** @description CBOR contents of the `plutus` script, null for `timelocks` */
      cbor: string | null;
    };
    script_redeemers: {
      /**
       * @description Hash of the transaction
       * @example 1a0570af966fb355a7160e4f82d5a80b8681b7955f5d44bec0dce628516157f0
       */
      tx_hash: string;
      /**
       * @description The index of the redeemer pointer in the transaction
       * @example 0
       */
      tx_index: number;
      /**
       * @description Validation purpose
       * @example spend
       * @enum {string}
       */
      purpose: "spend" | "mint" | "cert" | "reward";
      /**
       * @description Datum hash of the redeemer
       * @example 923918e403bf43c34b4ef6b48eb2ee04babed17320d8d1b9ff9ad086e86f44ec
       */
      redeemer_data_hash: string;
      /**
       * @deprecated
       * @description Datum hash
       * @example 923918e403bf43c34b4ef6b48eb2ee04babed17320d8d1b9ff9ad086e86f44ec
       */
      datum_hash: string;
      /**
       * @description The budget in Memory to run a script
       * @example 1700
       */
      unit_mem: string;
      /**
       * @description The budget in CPU steps to run a script
       * @example 476468
       */
      unit_steps: string;
      /**
       * @description The fee consumed to run the script
       * @example 172033
       */
      fee: string;
    }[];
    /**
     * @example {
     *   "json_value": {
     *     "int": 42
     *   }
     * }
     */
    script_datum: {
      /** @description JSON content of the datum */
      json_value: Partial<string> &
        Partial<{ [key: string]: unknown }> &
        Partial<unknown[]> &
        Partial<number> &
        Partial<number> &
        Partial<boolean>;
    };
    /**
     * @example {
     *   "cbor": "19a6aa"
     * }
     */
    script_datum_cbor: {
      /** @description CBOR serialized datum */
      cbor: string;
    };
    /**
     * @example [
     *   {
     *     "xpub": "d507c8f866691bd96e131334c355188b1a1d0b2fa0ab11545075aab332d77d9eb19657ad13ee581b56b0f8d744d66ca356b93d42fe176b3de007d53e9c4c4e7a",
     *     "role": 0,
     *     "index": 0,
     *     "address": "addr1q90sqnljxky88s0jsnps48jd872p7znzwym0jpzqnax6qs5nfrlkaatu28n0qzmqh7f2cpksxhpc9jefx3wrl0a2wu8q5amen7"
     *   }
     * ]
     */
    utils_addresses_xpub: {
      /** @description Script hash */
      xpub: string;
      /** @description Account role */
      role: number;
      /** @description Address index */
      index: number;
      /** @description Derived address */
      address: string;
    };
    /**
     * @example [
     *   {
     *     "time": 1612543884,
     *     "calls": 42
     *   },
     *   {
     *     "time": 1614523884,
     *     "calls": 6942
     *   }
     * ]
     */
    metrics: {
      /** @description Starting time of the call count interval (ends midnight UTC) in UNIX time */
      time: number;
      /** @description Sum of all calls for a particular day */
      calls: number;
    }[];
    /**
     * @example [
     *   {
     *     "time": 1612543814,
     *     "calls": 182,
     *     "endpoint": "block"
     *   },
     *   {
     *     "time": 1612543814,
     *     "calls": 42,
     *     "endpoint": "epoch"
     *   },
     *   {
     *     "time": 1612543812,
     *     "calls": 775,
     *     "endpoint": "block"
     *   },
     *   {
     *     "time": 1612523884,
     *     "calls": 4,
     *     "endpoint": "epoch"
     *   },
     *   {
     *     "time": 1612553884,
     *     "calls": 89794,
     *     "endpoint": "block"
     *   }
     * ]
     */
    metrics_endpoints: {
      /** @description Starting time of the call count interval (ends midnight UTC) in UNIX time */
      time: number;
      /** @description Sum of all calls for a particular day and endpoint */
      calls: number;
      /** @description Endpoint parent name */
      endpoint: string;
    }[];
    network: {
      supply: {
        /**
         * @description Maximum supply in Lovelaces
         * @example 45000000000000000
         */
        max: string;
        /**
         * @description Current total (max supply - reserves) supply in Lovelaces
         * @example 32890715183299160
         */
        total: string;
        /**
         * @description Current circulating (UTXOs + withdrawables) supply in Lovelaces
         * @example 32412601976210393
         */
        circulating: string;
        /**
         * @description Current supply locked by scripts in Lovelaces
         * @example 125006953355
         */
        locked: string;
        /**
         * @description Current supply locked in treasury
         * @example 98635632000000
         */
        treasury: string;
        /**
         * @description Current supply locked in reserves
         * @example 46635632000000
         */
        reserves: string;
      };
      stake: {
        /**
         * @description Current live stake in Lovelaces
         * @example 23204950463991654
         */
        live: string;
        /**
         * @description Current active stake in Lovelaces
         * @example 22210233523456321
         */
        active: string;
      };
    };
    nutlink_address: {
      /**
       * @description Bech32 encoded address
       * @example addr1qxqs59lphg8g6qndelq8xwqn60ag3aeyfcp33c2kdp46a09re5df3pzwwmyq946axfcejy5n4x0y99wqpgtp2gd0k09qsgy6pz
       */
      address: string;
      /**
       * @description URL of the specific metadata file
       * @example https://nut.link/metadata.json
       */
      metadata_url: string;
      /**
       * @description Hash of the metadata file
       * @example 6bf124f217d0e5a0a8adb1dbd8540e1334280d49ab861127868339f43b3948af
       */
      metadata_hash: string;
      /** @description The cached metadata of the `metadata_url` file. */
      metadata: { [key: string]: unknown } | null;
    };
    /**
     * @example [
     *   {
     *     "name": "ADAUSD",
     *     "count": 1980038,
     *     "latest_block": 2657092
     *   },
     *   {
     *     "name": "ADAEUR",
     *     "count": 1980038,
     *     "latest_block": 2657092
     *   },
     *   {
     *     "name": "ADABTC",
     *     "count": 1980038,
     *     "latest_block": 2657092
     *   }
     * ]
     */
    nutlink_address_tickers: {
      /** @description Name of the ticker */
      name: string;
      /** @description Number of ticker records */
      count: number;
      /** @description Block height of the latest record */
      latest_block: number;
    }[];
    /**
     * @example [
     *   {
     *     "tx_hash": "e8073fd5318ff43eca18a852527166aa8008bee9ee9e891f585612b7e4ba700b",
     *     "block_height": 2657092,
     *     "tx_index": 8,
     *     "payload": [
     *       {
     *         "source": "coinGecko",
     *         "value": "1.29"
     *       },
     *       {
     *         "source": "cryptoCompare",
     *         "value": "1.283"
     *       }
     *     ]
     *   }
     * ]
     */
    nutlink_address_ticker: {
      /** @description Hash of the transaction */
      tx_hash: string;
      /** @description Block height of the record */
      block_height: number;
      /** @description Transaction index within the block */
      tx_index: number;
      /** @description Content of the ticker */
      payload: (Partial<string> &
        Partial<{ [key: string]: unknown }> &
        Partial<unknown[]> &
        Partial<number> &
        Partial<number> &
        Partial<boolean>) & { [key: string]: unknown };
    }[];
    /**
     * @example [
     *   {
     *     "address": "addr_test1qpmtp5t0t5y6cqkaz7rfsyrx7mld77kpvksgkwm0p7en7qum7a589n30e80tclzrrnj8qr4qvzj6al0vpgtnmrkkksnqd8upj0",
     *     "tx_hash": "e8073fd5318ff43eca18a852527166aa8008bee9ee9e891f585612b7e4ba700b",
     *     "block_height": 2657092,
     *     "tx_index": 8,
     *     "payload": [
     *       {
     *         "source": "coinGecko",
     *         "value": "1.29"
     *       },
     *       {
     *         "source": "cryptoCompare",
     *         "value": "1.283"
     *       }
     *     ]
     *   }
     * ]
     */
    nutlink_tickers_ticker: {
      /** @description Address of a metadata oracle */
      address: string;
      /** @description Hash of the transaction */
      tx_hash: string;
      /** @description Block height of the record */
      block_height: number;
      /** @description Transaction index within the block */
      tx_index: number;
      /** @description Content of the ticker */
      payload: (Partial<string> &
        Partial<{ [key: string]: unknown }> &
        Partial<unknown[]> &
        Partial<number> &
        Partial<number> &
        Partial<boolean>) & { [key: string]: unknown };
    }[];
  };
  responses: {
    /** Bad request */
    400: {
      content: {
        "application/json": {
          /** @example 400 */
          status_code: number;
          /** @example Bad Request */
          error: string;
          /** @example Backend did not understand your request. */
          message: string;
        };
      };
    };
    /** Authentication secret is missing or invalid */
    403: {
      content: {
        "application/json": {
          /** @example 403 */
          status_code: number;
          /** @example Forbidden */
          error: string;
          /** @example Invalid project token. */
          message: string;
        };
      };
    };
    /** Component not found */
    404: {
      content: {
        "application/json": {
          /** @example 404 */
          status_code: number;
          /** @example Not Found */
          error: string;
          /** @example The requested component has not been found. */
          message: string;
        };
      };
    };
    /** IP has been auto-banned for extensive sending of requests after usage limit has been reached */
    418: {
      content: {
        "application/json": {
          /** @example 418 */
          status_code: number;
          /** @example Requested Banned */
          error: string;
          /** @example IP has been auto-banned for flooding. */
          message: string;
        };
      };
    };
    /** Mempool is already full, not accepting new txs straight away */
    425: {
      content: {
        "application/json": {
          /** @example 425 */
          status_code: number;
          /** @example Mempool Full */
          error: string;
          /** @example Mempool is full, please try resubmitting again later. */
          message: string;
        };
      };
    };
    /** Usage limit reached */
    429: {
      content: {
        "application/json": {
          /** @example 429 */
          status_code: number;
          /** @example Project Over Limit */
          error: string;
          /** @example Usage is over limit. */
          message: string;
        };
      };
    };
    /** Internal Server Error */
    500: {
      content: {
        "application/json": {
          /** @example 500 */
          status_code: number;
          /** @example Internal Server Error */
          error: string;
          /** @example An unexpected response was received from the backend. */
          message: string;
        };
      };
    };
    overusage_limit: components["responses"]["429"];
    mempool_full: components["responses"]["425"];
    autobanned: components["responses"]["418"];
    not_found: components["responses"]["404"];
    internal_server_error: components["responses"]["500"];
    unauthorized_error: components["responses"]["403"];
    bad_request: components["responses"]["400"];
  };
}

export interface operations {}

export interface external {}
